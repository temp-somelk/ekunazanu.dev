<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
    <title>ekunazanu</title>
    <subtitle>A blogified version of xkcd, only worse and more personal and not really funny.</subtitle>
    <link rel="self" type="application/atom+xml" href="https://ekunazanu.dev/atom.xml"/>
    <link rel="alternate" type="text/html" href="https://ekunazanu.dev"/>
    <updated>2027-01-28T00:00:00+00:00</updated>
    <id>https://ekunazanu.dev/atom.xml</id>
    <entry xml:lang="en">
        <title>Lattice Cryptography</title>
        <published>2027-01-28T00:00:00+00:00</published>
        <updated>2027-01-28T00:00:00+00:00</updated>
        <author><name>Anchit Roy</name></author>
        <link rel="alternate" type="text/html" href="https://ekunazanu.dev/lab/lattice-cryptography/"/>
        <id>https://ekunazanu.dev/lab/lattice-cryptography/</id>
        <summary type="html">Achieving post quantum cryptography using lattices and linear algerba.</summary>
        <content type="html" xml:base="https://ekunazanu.dev/lab/lattice-cryptography/">&lt;p&gt;More specifically Digital Signatures.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;Lattices&quot;&gt;Lattices&lt;&#x2F;h2&gt;
&lt;p&gt;AA&lt;&#x2F;p&gt;
&lt;p&gt;Use from research paper presentation.
maybe use dashed lines to represent data transfer similar to: https:&#x2F;&#x2F;pair.withgoogle.com&#x2F;explorables&#x2F;federated-learning&#x2F;&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>Free Speech</title>
        <published>2026-07-28T00:00:00+00:00</published>
        <updated>2026-07-28T00:00:00+00:00</updated>
        <author><name>Anchit Roy</name></author>
        <link rel="alternate" type="text/html" href="https://ekunazanu.dev/lab/free-speech/"/>
        <id>https://ekunazanu.dev/lab/free-speech/</id>
        <summary type="html">Visualising frequently used words when given a choice to speak (somewhat) freely.</summary>
        <content type="html" xml:base="https://ekunazanu.dev/lab/free-speech/">&lt;p&gt;This is another experimental post. Arguably more ‘experimental’ than the previous ones.&lt;&#x2F;p&gt;
&lt;p&gt;Use Pi Zero 2W or Pi 3B for the social experiment. Visualise using a word cloud, and bar chart for the same data below (using D3?) Heatmap for most usage using calendar plot — but zoomed on for a few months. Link for raw data at the bottom. Pi sends new data every 30 minutes.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;References&quot;&gt;References&lt;&#x2F;h2&gt;
&lt;p&gt;https:&#x2F;&#x2F;robbieandrew.github.io&#x2F;india&#x2F;&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>Generative Music</title>
        <published>2026-05-01T00:00:00+00:00</published>
        <updated>2026-05-01T00:00:00+00:00</updated>
        <author><name>Anchit Roy</name></author>
        <link rel="alternate" type="text/html" href="https://ekunazanu.dev/lab/generative-music/"/>
        <id>https://ekunazanu.dev/lab/generative-music/</id>
        <summary type="html">Using music theory to generate ambient music.</summary>
        <content type="html" xml:base="https://ekunazanu.dev/lab/generative-music/">&lt;p&gt;This is another one of the more experimental posts.&lt;&#x2F;p&gt;
&lt;p&gt;I like music — a lot of people do. I also like math — a lot of people do &lt;strong&gt;not&lt;&#x2F;strong&gt;. It’s time to mix both these arts. It’s time to experiment and create.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;Music_Theory&quot;&gt;Music Theory&lt;&#x2F;h2&gt;
&lt;p&gt;To create music, it first helps to have an understanding of what is sound and what makes certain sounds more pleasant than others.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;ekunazanu.dev&#x2F;lab&#x2F;generative-music&#x2F;airparticles&quot; alt=&quot;airparts&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;The particles above loosely represent air molecules. A vibrating or oscillating object can cause the air molecules to vibrate and oscillate as well, creating pressure waves. sound. If the air pressure at a point is plotted with respect to time, then the resulting graph is similar to a sine wave:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;ekunazanu.dev&#x2F;lab&#x2F;generative-music&#x2F;interactive&quot; alt=&quot;particles and corresponding wave below, (air pressure at ear at position on the left mapped on y axis, with time on moving x axis) adjustable pitch and amplitude&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;details  open  &gt;
&lt;summary&gt;Sine waves&lt;&#x2F;summary&gt;
The pressure graph draws out looks similar to sine wave since the source creating the vibrations is oscillating in a sine like motio .
&lt;&#x2F;details&gt;
&lt;p&gt;The amplitude of the wave corresponds to the difference in sound pressure — the intensity or &lt;strong&gt;loudness&lt;&#x2F;strong&gt; of the sound, and the frequency of the wave corresponds to the &lt;strong&gt;pitch&lt;&#x2F;strong&gt; of the sound. From this point on, the abstracted wave representation will be used instead of air particles because it is simpler to represent and easier to comprehend.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;&quot;&gt;Intervals&lt;&#x2F;h3&gt;
&lt;p&gt;The previous example used a sound that had a singular frequency — this time, another wave is added:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;ekunazanu.dev&#x2F;lab&#x2F;generative-music&#x2F;interactive&quot; alt=&quot;two waves with adjustable freq -&amp;gt; same amplitude base frequency 1st in black and 2nd freq in gray&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Try changing the frequency of the second sound (wave) to twice of the original. Now try it again with one and a half times the original. Try it with other frequencies too, and notice when they sound pleasant. When the freuqency of the two sounds are in simple ratios, they sound harmonious.&lt;&#x2F;p&gt;
&lt;p&gt;Music theory is based around these ratios, or &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Interval_(music)&quot;&gt;intervals&lt;&#x2F;a&gt;. A frequency ratio of 2:1 is the perfect octave. A ratio of 3:2 gives us the perfect fifth, 4:3 is the perfect fourth, 5:4 is the major third, 9:8 is the major second, and so on. The smallest of the intervals is the minor second also called the semitone, has a ratio of 16:15. The minor second along with a few other intervals sound &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Consonance_and_dissonance&quot;&gt;dissonant&lt;&#x2F;a&gt; since they do not have simple frequency ratios, but are still useful for creating tension.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;ekunazanu.dev&#x2F;lab&#x2F;generative-music&#x2F;static&quot; alt=&quot;all 12 notes with interval ratio multiple and interval name above -&amp;gt; base in black, all others in gray&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;This simple integer ratio interval system is the &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Just_intonation&quot;&gt;just intonation&lt;&#x2F;a&gt;. However because of the way the intervals are defined, it is &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=1Hqm0dYKUx4&quot;&gt;mathematically impossible&lt;&#x2F;a&gt; to get a perfect scale that have consistent interval ratios between any other two notes in the scale. Instead, the &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Equal_temperament&quot;&gt;equal temperament&lt;&#x2F;a&gt; (equally spaced intervals) system is used to minimize the &lt;em&gt;overall&lt;&#x2F;em&gt; deviations in intonation.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;ekunazanu.dev&#x2F;lab&#x2F;generative-music&#x2F;static&quot; alt=&quot;All notes with equal temperament ratio multiple (both root 2 and decimal) and interval name above&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;-1&quot;&gt;Scales&lt;&#x2F;h3&gt;
&lt;p&gt;There are twelve notes in music theory — A, A#, B, C, C#, D, D#, E, F, F#, G, G# — or if using flats, then A, B♭, B, C, D♭, D, E♭, E, F, G♭, G, A♭. It’s unnecessarily complicated, but that’s just the way it is. The most common standard frequency around which the other notes are derived from, is 440Hz. All other notes are derived using the interval ratios mentioned before.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;ekunazanu.dev&#x2F;lab&#x2F;generative-music&#x2F;static&quot; alt=&quot;all notes with note name (A to G#&#x2F;Aflat) and frequencies below and fixed ratio multiple BUT NO interval name above&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Note: There is more than one &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Octave&quot;&gt;octave&lt;&#x2F;a&gt;, but we’ll restrict ourselves to one to keep things simpler.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;ekunazanu.dev&#x2F;lab&#x2F;generative-music&#x2F;static&quot; alt=&quot;All notes (bigger superset from C1 to C7) with and note name below and ratio multiple&#x2F;divisor above NO interval name zoomed out ABOVE and zoomed in on one octave A4 - G#4 (same as above) BELOW&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;From these twelve notes, a subset can be selected to get a &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Scale_(music)&quot;&gt;scale&lt;&#x2F;a&gt;. Scales can be described by their number of notes and by the structure of their intervals, to set a specific ‘mood’ for the melody. Usually music in a &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Major_scale&quot;&gt;major scale&lt;&#x2F;a&gt; sounds upbeat, while music in &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Minor_scale&quot;&gt;minor scales&lt;&#x2F;a&gt; sound melancholic. &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Pentatonic_scale&quot;&gt;Pentatonic scales&lt;&#x2F;a&gt; are similar but have five notes instead. &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Mode_(music)&quot;&gt;Modes&lt;&#x2F;a&gt; are similar in the sense they define the structure of intervals, but are generalized; not necessarily linked to specific &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Key_(music)&quot;&gt;keys&lt;&#x2F;a&gt;, and have eight notes.&lt;&#x2F;p&gt;
&lt;p&gt;Here’s an interactive example to get a sense of different scales and modes:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;ekunazanu.dev&#x2F;lab&#x2F;generative-music&#x2F;interactive&quot; alt=&quot;all twelve notes - scrollable. on top interval name - fixed. clicking on the note horizontal scrolls twelve notes to get new base note. keys of scale are highlighted with colored background circle. dropdown menu to select scale&#x2F;mode. in case of Modes, remove notes and only show background circle — to emphasize interval structure. Bottom -&amp;gt; “Scale of C&#x2F;D#&#x2F;etc or Mixolydian&#x2F;Ionian Mode” and play button below. play individual notes in asc. order&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;-2&quot;&gt;Chords&lt;&#x2F;h3&gt;
&lt;p&gt;When two notes are played separately in succession, it is called a &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Melody&quot;&gt;melodic interval&lt;&#x2F;a&gt;. When the two notes are played in unison, it is called a &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Harmony&quot;&gt;harmonic interval&lt;&#x2F;a&gt;. And when three or more notes are played simultaneously, it is a &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Chord_(music)&quot;&gt;chord&lt;&#x2F;a&gt;. Except &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Power_chord&quot;&gt;power chords&lt;&#x2F;a&gt; (consiting of two notes) are a thing, and &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Chord_(music)&quot;&gt;arpeggios&lt;&#x2F;a&gt; (broken chords) can be chords too sometimes, so the definition is somewhat loose. Usually, chords are triads — consiting of the root note, a major or minor third, and a perfect fifth.&lt;&#x2F;p&gt;
&lt;p&gt;Again, below is an example to experiment with different chords:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;ekunazanu.dev&#x2F;lab&#x2F;generative-music&#x2F;interactive&quot; alt=&quot;all twelve notes - scrollable. on top interval name - fixed. clicking on the note horizontal scrolls twelve notes to get new base note. keys of scale are highlighted with colored background circle. dropdown menu to select chord. First row same as above example - select scale. Second row for chords, using different color for background circle. Bottom -&amp;gt; “CMaj&#x2F;D#Min&#x2F;GMaj7 etc Chord” and play button below. play in unison once.&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;-3&quot;&gt;Dynamics&lt;&#x2F;h3&gt;
&lt;p&gt;We discussed about the frequency or pitch of sounds, but the &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Dynamics_(music)&quot;&gt;amplitude or loudness&lt;&#x2F;a&gt; can just as well be altered to express a feeling. The loudness of a section can ascend (crescedo) to create drama and tension, or it can gradually descend (decrescendo) after resolving the tension. Sounds can also be soft and quiet (piano) to emphasize the pieces that are strong and loud (forte) following them.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;-4&quot;&gt;Timbre&lt;&#x2F;h3&gt;
&lt;p&gt;Going back to sound waves, it is important to specify that so far we’ve only been dealing with sine waves. But waveforms other than the sinusoid exist too — notable ones include the square wave, triangular wave, and sawtooth wave. These however sound different when compared against the sine waves — even at the same frequency.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;ekunazanu.dev&#x2F;lab&#x2F;generative-music&#x2F;interactive&quot; alt=&quot;square, sawtooth, triangular, sine at same (adjustable) freq play buttons for each below&#x2F;on the side&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Using &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Fourier_analysis&quot;&gt;fourier analysis&lt;&#x2F;a&gt;, these waves can be decomposed into multiple sine waves. The human ear perceives the square wave (and the sawtooth and triangular wave for that matter) as a group of multiple sine waves with frequencies.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;ekunazanu.dev&#x2F;lab&#x2F;generative-music&#x2F;interative&quot; alt=&quot;decomposed square,trian,sawtooth to sine frequencies&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Try creating your own waveform to see how it sounds at the frequency:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;ekunazanu.dev&#x2F;lab&#x2F;generative-music&#x2F;interactive&quot; alt=&quot;self waveform draw and play with frequency selector slider and play button&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Similarly, different instruments have different and unique waveforms and hence sound different even at the same frequency. This is why instruments sound different even when playing the same notes. Notes played on some instruments like guitars or pianos quickly become quieter over time — the change in amplitude of the sound over time, described by their &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Envelope_(music)&quot;&gt;envelope&lt;&#x2F;a&gt; — differ based on the instrument, also giving each of them a unique tone. The unique tone quality of an instrument is called its &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Timbre&quot;&gt;timbre&lt;&#x2F;a&gt;. For example, this is the waveform and envelope of a piano and a guitar playing at 440Hz.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;ekunazanu.dev&#x2F;lab&#x2F;generative-music&#x2F;maybevideo&quot; alt=&quot;piano and guitar difference&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;-5&quot;&gt;Rhythm&lt;&#x2F;h3&gt;
&lt;p&gt;Try playing these beats:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;ekunazanu.dev&#x2F;lab&#x2F;generative-music&#x2F;audio&quot; alt=&quot;irregular beats&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;
&lt;img src=&quot;https:&#x2F;&#x2F;ekunazanu.dev&#x2F;lab&#x2F;generative-music&#x2F;audio&quot; alt=&quot;regular beats&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;
&lt;img src=&quot;https:&#x2F;&#x2F;ekunazanu.dev&#x2F;lab&#x2F;generative-music&#x2F;audio&quot; alt=&quot;waltz beats&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;The first beat is random, and does not necessarily sound enjoyable. The second is periodic, and is slightly more pleasant but nonetheless feels monotonous and dull. The last one feels rhythmic and dynamic; more enjoyable compared to the previous two. One way to make music sound more satisfying is to use stick to regular pulse beat groupings and accentuating certain beats — using a &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Metre_(music)&quot;&gt;metre&lt;&#x2F;a&gt;. The &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Time_signature&quot;&gt;number&lt;&#x2F;a&gt; of beats per &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Bar_(music)&quot;&gt;grouping&lt;&#x2F;a&gt; is usually four or three — called &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Duple_and_quadruple_metre#Quadruple_metre&quot;&gt;common time&lt;&#x2F;a&gt; and &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Triple_metre&quot;&gt;waltz&lt;&#x2F;a&gt; respectively.&lt;&#x2F;p&gt;
&lt;p&gt;Even after sticking to a meter, the music might sound rhythmic for a while, but if played long enough, even it will begin to sound repetitive. The obvious way to go about it is to introduce variations in the duration of certain notes, while still loosely sticking to the selected beat structure. Notes can be half, twice, quadruple the duration of a single beat, or &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Note_value&quot;&gt;somewhere in between&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;While using certain rhythm patterns can make music sound structured and more pleasing, it can also be used to set the of vibe of the music. The number of &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Tempo&quot;&gt;beats per minute&lt;&#x2F;a&gt; can be varied to express emotions. Music with a fast tempo sounds lively and energetic, while music with a slow tempo sounds sad and mellow.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;ekunazanu.dev&#x2F;lab&#x2F;generative-music&#x2F;audio&quot; alt=&quot;upbeat music&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;
&lt;img src=&quot;https:&#x2F;&#x2F;ekunazanu.dev&#x2F;lab&#x2F;generative-music&#x2F;audio&quot; alt=&quot;slow sad song&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;-6&quot;&gt;Playground&lt;&#x2F;h2&gt;
&lt;p&gt;On that note (pun not intended), it’s time to see wha the amalgamation of all the previously mentioned parameters has all led to.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;-7&quot;&gt;References&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;Make sounds similar to Limbo game OST&lt;&#x2F;li&gt;
&lt;li&gt;https:&#x2F;&#x2F;ivanish.ca&#x2F;diminished-fifth&#x2F;&lt;&#x2F;li&gt;
&lt;li&gt;https:&#x2F;&#x2F;generative.fm&#x2F;&lt;&#x2F;li&gt;
&lt;li&gt;https:&#x2F;&#x2F;ciechanow.ski&#x2F;sound&#x2F;&lt;&#x2F;li&gt;
&lt;li&gt;search for algorithmic composition&lt;&#x2F;li&gt;
&lt;li&gt;Alt -&amp;gt; https:&#x2F;&#x2F;alterebro.com&#x2F; for generative images&lt;&#x2F;li&gt;
&lt;li&gt;https:&#x2F;&#x2F;www.youtube.com&#x2F;@marcevanstein&lt;&#x2F;li&gt;
&lt;li&gt;https:&#x2F;&#x2F;learningmusic.ableton.com&#x2F;make-beats&#x2F;tempo-and-genre.html&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>The end is never the end is never the end is never the end is never the end is never the end</title>
        <published>2025-05-27T00:00:00+00:00</published>
        <updated>2025-05-27T00:00:00+00:00</updated>
        <author><name>Anchit Roy</name></author>
        <link rel="alternate" type="text/html" href="https://ekunazanu.dev/log/27-the-end-is-never-the-end/"/>
        <id>https://ekunazanu.dev/log/27-the-end-is-never-the-end/</id>
        <summary type="html">Success.</summary>
        <content type="html" xml:base="https://ekunazanu.dev/log/27-the-end-is-never-the-end/">&lt;p&gt;What now?&lt;&#x2F;p&gt;
&lt;p&gt;Well there is a &lt;a href=&quot;&#x2F;now&quot;&gt;now&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Long story short, I’ll&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>This was a Triumph</title>
        <published>2025-05-20T00:00:00+00:00</published>
        <updated>2025-05-20T00:00:00+00:00</updated>
        <author><name>Anchit Roy</name></author>
        <link rel="alternate" type="text/html" href="https://ekunazanu.dev/log/26-triumph/"/>
        <id>https://ekunazanu.dev/log/26-triumph/</id>
        <summary type="html">Success.</summary>
        <content type="html" xml:base="https://ekunazanu.dev/log/26-triumph/">&lt;p&gt;This was a triumph&lt;br &#x2F;&gt;
I am making a note here:&lt;br &#x2F;&gt;
“Huge success”&lt;br &#x2F;&gt;
It’s hard to overstate&lt;br &#x2F;&gt;
My satisfaction&lt;&#x2F;p&gt;
&lt;p&gt;Okay, more like mediocre success. But I’ll take it over no progress.&lt;&#x2F;p&gt;
&lt;p&gt;It started out as a journaling device to keep me on track and from wasting time. The goal was for mediocre success. Goal achieved.&lt;&#x2F;p&gt;
&lt;p&gt;Now, these points of data make a beautiful line. And we’re out of beta, we’re releasing on time.&lt;&#x2F;p&gt;
&lt;p&gt;I am rewarding myself with cake. I hate cakes.&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>Reality Hit</title>
        <published>2025-01-17T00:00:00+00:00</published>
        <updated>2025-01-17T00:00:00+00:00</updated>
        <author><name>Anchit Roy</name></author>
        <link rel="alternate" type="text/html" href="https://ekunazanu.dev/log/2-reality/"/>
        <id>https://ekunazanu.dev/log/2-reality/</id>
        <summary type="html">Turns out I&#x27;m pretty dumb.</summary>
        <content type="html" xml:base="https://ekunazanu.dev/log/2-reality/">&lt;p&gt;Reality hit. Hard. . College is wonderful. Such a rigid course structure. Really promotes creativity.&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>Version Control</title>
        <published>2025-01-10T00:00:00+00:00</published>
        <updated>2025-01-10T00:00:00+00:00</updated>
        <author><name>Anchit Roy</name></author>
        <link rel="alternate" type="text/html" href="https://ekunazanu.dev/log/1-vcs/"/>
        <id>https://ekunazanu.dev/log/1-vcs/</id>
        <summary type="html">Preparing a gameplan for medium success.</summary>
        <content type="html" xml:base="https://ekunazanu.dev/log/1-vcs/">&lt;p&gt;I won’t beat around the bush. College feels like a giant waste of time and money, not that I should be surprised. But to be fair I haven’t been productive myself either. I just wasted an entire summer. And two years before that. And also two years before that. I’ve been slacking for way too long and it’s time to get serious.&lt;&#x2F;p&gt;
&lt;p&gt;This is the goal: Speedrun the fundamentals of computer science.&lt;&#x2F;p&gt;
&lt;p&gt;First things first, I need a plan. Fortunately, I have one. Unfortunately I don’t have enough braincells to pull it off quickly enough. BUT fortunately my braincell count is just right enough that I &lt;em&gt;think&lt;&#x2F;em&gt; I can do it — right the top of the Dunning-Kruger curve.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;media&#x2F;log&#x2F;vcs&#x2F;dunning-kruger-curve.avif&quot; alt=&quot;cartoonish representation of a dunning kruger curve&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;&quot;&gt;The Plan™&lt;&#x2F;h2&gt;
&lt;p&gt;Okay, so The Plan™ is ridiculously simple: Just study and make projects. To be more specific though, that includes completing most of the first three chapters of &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;web.mit.edu&#x2F;6.001&#x2F;6.037&#x2F;sicp.pdf&quot;&gt;SICP&lt;&#x2F;a&gt;, and getting comfortable with &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;cims.nyu.edu&#x2F;~regev&#x2F;teaching&#x2F;discrete_math_fall_2005&#x2F;dmbook.pdf&quot;&gt;discrete math&lt;&#x2F;a&gt; and &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;ocw.mit.edu&#x2F;courses&#x2F;18-06sc-linear-algebra-fall-2011&#x2F;&quot;&gt;linear algebra&lt;&#x2F;a&gt;. I also want to focus a bit on &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www3.cs.stonybrook.edu&#x2F;~skiena&#x2F;373&#x2F;videos&#x2F;&quot;&gt;DSA&lt;&#x2F;a&gt;, and learn some JS and make one or two web related projects. All this hopefully by the end the of this year, 2024. And if I have a healthy amount of time left, practice some &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;courses.csail.mit.edu&#x2F;6.042&#x2F;spring17&#x2F;mcs.pdf&quot;&gt;math for CS&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;If all those links seemed familiar, it is because it’s from &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;teachyourselfcs.com&#x2F;&quot;&gt;teachyourselfcs.com&lt;&#x2F;a&gt;. By the next semester I am hoping to finish &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;teachyourselfcs.com&#x2F;#operating-systems&quot;&gt;operating systems&lt;&#x2F;a&gt; and &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;teachyourselfcs.com&#x2F;#networking&quot;&gt;networking&lt;&#x2F;a&gt; and a little bit about &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;teachyourselfcs.com&#x2F;#databases&quot;&gt;databases&lt;&#x2F;a&gt;. I probably don’t &lt;em&gt;need&lt;&#x2F;em&gt; to learn about compilers too, so it’s pretty far down the list of things I need to get done immediately — but it’s a nice topic I definitely I want to learn more about after graduation.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;media&#x2F;log&#x2F;vcs&#x2F;important.avif&quot; alt=&quot;text that says important followed by an arrow pointing down&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;And now, the most important part of The Plan™ — I know my ADHD brain will try its best to get distracted by the most random of things, so the aim here is to post a log every week about the things I learnt to keep me in check. Similar to how tracking expenses make people more deliberate about their spending, hopefully writing these logs will knock some sense into me and make me aware of how much time I waste every week. These will be short summaries; my acutal notes will still be on a private Obsidian repo. Maybe I’ll make it public. No guarantees.&lt;&#x2F;p&gt;
&lt;p&gt;That’s all. See you until next week — if this site still exists by then. If it does, I don’t intend on wasting more than ten minutes writing these, so if anyone is reading this, don’t expect high quality posts.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;media&#x2F;log&#x2F;vcs&#x2F;doodle-cya.avif&quot; alt=&quot;doodle of a person waving goodbye&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;TL;DR&lt;&#x2F;strong&gt;: It’s time to start being productive. And hopefully to find gold. Or a job.&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>Stream Ciphers</title>
        <published>2025-01-05T00:00:00+00:00</published>
        <updated>2025-01-05T00:00:00+00:00</updated>
        <author><name>Anchit Roy</name></author>
        <link rel="alternate" type="text/html" href="https://ekunazanu.dev/lab/stream-ciphers/"/>
        <id>https://ekunazanu.dev/lab/stream-ciphers/</id>
        <summary type="html">Visual explanation of stream cipher algorithms.</summary>
        <content type="html" xml:base="https://ekunazanu.dev/lab/stream-ciphers/">&lt;p&gt;Encryption is a way to encode data so that only people who have ‘keys’ to the encoded data can ‘unlock’ or decrypt it. There are different ways to encrypt data, but most can be classified into two main categories based on the type of keys used.&lt;&#x2F;p&gt;
&lt;p&gt;The first kind employs one key to both encrypt and decrypt data, and is called &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Symmetric-key_algorithm&quot;&gt;symmetric key cryptography&lt;&#x2F;a&gt; — due to the symmetry of keys involved in the encryption-decryption process. The second type, called &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Public-key_cryptography&quot;&gt;asymmetric key cryptography&lt;&#x2F;a&gt;, involves using a key to encrypt the data and a separate key to decrypt the encrypted data.&lt;&#x2F;p&gt;
&lt;p&gt;This post is primarily about symmetric key cryptography, and more specifically about stream ciphers.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;Caesar_Cipher&quot;&gt;Caesar Cipher&lt;&#x2F;h2&gt;
&lt;p&gt;One of the simplest encryption techniques includes the &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Caesar_cipher&quot;&gt;Caesar cipher&lt;&#x2F;a&gt;, a type of &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Substitution_cipher#Simple&quot;&gt;simple substitution cipher&lt;&#x2F;a&gt;. The message to be encrypted (called plaintext) is encoded by substituting its letters with the corresponding letters from an alphabet that is ‘shifted’ or ‘rotated’ to the left or right by some amount:&lt;&#x2F;p&gt;

&lt;svg id=&quot;bitarraySVG&quot; viewBox=&quot;0 0 200 75&quot; fill=&quot;none&quot; width=&quot;1200px&quot; height=&quot;450px&quot;&gt;
&lt;desc&gt;Bit array.&lt;&#x2F;desc&gt;
&lt;rect id=&quot;bitarrayBG&quot; fill=&quot;#aaa&quot; x=&quot;0&quot; y=&quot;0&quot; width=&quot;200&quot; height=&quot;150&quot; &#x2F;&gt;
&lt;&#x2F;svg&gt;
&lt;!--
![https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;One-time_pad#Example; caesar encrypt; button for encrypt and key;](interactive)
 --&gt;

&lt;p&gt;If the letters are encoded as a number determined by its position in the alphabet, then the encrypted letter for a plaintext letter &lt;code&gt;m&lt;&#x2F;code&gt; is &lt;code&gt;E(m) = (m + k) mod 26&lt;&#x2F;code&gt;, where &lt;code&gt;k&lt;&#x2F;code&gt; is the shift value. The encrypted message is often referred to as the ciphertext. Decryption has to reverse the encryption operation. So the decrypted letter for the ciphertext letter &lt;code&gt;c&lt;&#x2F;code&gt; is then &lt;code&gt;D(c) = (c - k) mod 26&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;

&lt;svg id=&quot;bitarraySVG&quot; viewBox=&quot;0 0 200 75&quot; fill=&quot;none&quot; width=&quot;1200px&quot; height=&quot;450px&quot;&gt;
&lt;desc&gt;Bit array.&lt;&#x2F;desc&gt;
&lt;rect id=&quot;bitarrayBG&quot; fill=&quot;#aaa&quot; x=&quot;0&quot; y=&quot;0&quot; width=&quot;200&quot; height=&quot;150&quot; &#x2F;&gt;
&lt;&#x2F;svg&gt;
&lt;!--
![caesar decrypt; reuse key from above;](interactive)
 --&gt;

&lt;details  open  &gt;
&lt;summary&gt;Modulo Operation&lt;&#x2F;summary&gt;
The &lt;code&gt;mod&lt;&#x2F;code&gt; or &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Modulo&quot;&gt;modulo operator&lt;&#x2F;a&gt; returns the remainder after division by a number — which in this case is 26, the number of letters in the Latin alphabet.
&lt;&#x2F;details&gt;
&lt;p&gt;The &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;ROT13&quot;&gt;ROT13&lt;&#x2F;a&gt; is a popular and special case of a Caesar cipher, having a shift value of 13. Since the Latin alphabet has 26 letters, shifting the alphabet to the left by 13 positions is the same as shifting it to the right by 13 positions. So, decryption can be defined as the same operation as encryption. That is, for a plaintext message &lt;code&gt;m&lt;&#x2F;code&gt; with ciphertext &lt;code&gt;c&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;E(m) = (m + 13) mod 26 = (m - 13) mod 26 = c&lt;&#x2F;code&gt;&lt;br &#x2F;&gt;
&lt;code&gt;D(c) = (c + 13) mod 26 = (c - 13) mod 26 = m&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Both the encryption and decryption operations are the same. The only difference is the domain of the operators — one operates on the plaintext while the other operates on the ciphertext — but that difference is purely semantical.&lt;&#x2F;p&gt;

&lt;svg id=&quot;bitarraySVG&quot; viewBox=&quot;0 0 200 75&quot; fill=&quot;none&quot; width=&quot;1200px&quot; height=&quot;450px&quot;&gt;
&lt;desc&gt;Bit array.&lt;&#x2F;desc&gt;
&lt;rect id=&quot;bitarrayBG&quot; fill=&quot;#aaa&quot; x=&quot;0&quot; y=&quot;0&quot; width=&quot;200&quot; height=&quot;150&quot; &#x2F;&gt;
&lt;&#x2F;svg&gt;
&lt;!--
![https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;One-time_pad#Example; button for rot13 &quot;encrypt&#x2F;decrypt&quot;;](interactive)
 --&gt;

&lt;p&gt;The shift parameter in the Caesar cipher determines how a message gets encrypted and decrypted — it acts as a ‘key’ for encrypting and decrypting the data. Only parties who have the knowledge about the keys can decrypt the messages encrypted with that key. While this is the main goal of symmetric encryption, the Caesar cipher is not a very good way to achieve this goal.&lt;&#x2F;p&gt;
&lt;p&gt;Single-alphabet substitution ciphers like the Caesar cipher are not at all secure, and they can be very easily broken — since &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Brute-force_attack&quot;&gt;brute forcing&lt;&#x2F;a&gt; all possible keys takes a trivial amount of time. It can alternatively also be broken by trying to &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Frequency_analysis#Frequency_analysis_for_simple_substitution_ciphers&quot;&gt;match the frequency distribution&lt;&#x2F;a&gt; of letters of the ciphertext and the frequency distribution of letters of a language.&lt;&#x2F;p&gt;
&lt;details  open  &gt;
&lt;summary&gt;Brute force attacks&lt;&#x2F;summary&gt;
A brute force attack refers to systematically trying all possible combinations of a secret key or password, until the correct one is found.
&lt;&#x2F;details&gt;
&lt;h2 id=&quot;One-Time_Pad&quot;&gt;One-Time Pad&lt;&#x2F;h2&gt;
&lt;p&gt;In the Caesar cipher all the letters are shifted by the same amount, determined by a single-valued key. However, employing separate shift values for each letter is arguably more secure. The &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Vigen%C3%A8re_cipher&quot;&gt;Vigenère cipher&lt;&#x2F;a&gt; is a &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Polyalphabetic_cipher&quot;&gt;polyalphabetic substitution ciper&lt;&#x2F;a&gt; — it uses a key with multiple shift values for encrypting messages. If the key is shorter than the plaintext message, the key is repeated until it matches the length of the message.&lt;&#x2F;p&gt;

&lt;svg id=&quot;bitarraySVG&quot; viewBox=&quot;0 0 200 75&quot; fill=&quot;none&quot; width=&quot;1200px&quot; height=&quot;450px&quot;&gt;
&lt;desc&gt;Bit array.&lt;&#x2F;desc&gt;
&lt;rect id=&quot;bitarrayBG&quot; fill=&quot;#aaa&quot; x=&quot;0&quot; y=&quot;0&quot; width=&quot;200&quot; height=&quot;150&quot; &#x2F;&gt;
&lt;&#x2F;svg&gt;
&lt;!--
![https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;One-time_pad#Example; input box for key — key repeats if short;](interactive)
 --&gt;

&lt;p&gt;Again, decryption involves subtracting the key from the ciphertext using modular artihmetic:&lt;&#x2F;p&gt;

&lt;svg id=&quot;bitarraySVG&quot; viewBox=&quot;0 0 200 75&quot; fill=&quot;none&quot; width=&quot;1200px&quot; height=&quot;450px&quot;&gt;
&lt;desc&gt;Bit array.&lt;&#x2F;desc&gt;
&lt;rect id=&quot;bitarrayBG&quot; fill=&quot;#aaa&quot; x=&quot;0&quot; y=&quot;0&quot; width=&quot;200&quot; height=&quot;150&quot; &#x2F;&gt;
&lt;&#x2F;svg&gt;
&lt;!--
![https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;One-time_pad#Example; decryption; reuse key from above;](interactive)
 --&gt;

&lt;p&gt;Although more secure than the Caesar cipher, the Vigenère cipher is &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Vigen%C3%A8re_cipher#Cryptanalysis&quot;&gt;not secure&lt;&#x2F;a&gt; because of the repeating nature of the key. If length of a key is correctly guessed, the ciphertext can be treated as interweaved Caesar ciphers — all of which can be individually broken rather trivially.&lt;&#x2F;p&gt;

&lt;svg id=&quot;bitarraySVG&quot; viewBox=&quot;0 0 200 75&quot; fill=&quot;none&quot; width=&quot;1200px&quot; height=&quot;450px&quot;&gt;
&lt;desc&gt;Bit array.&lt;&#x2F;desc&gt;
&lt;rect id=&quot;bitarrayBG&quot; fill=&quot;#aaa&quot; x=&quot;0&quot; y=&quot;0&quot; width=&quot;200&quot; height=&quot;150&quot; &#x2F;&gt;
&lt;&#x2F;svg&gt;
&lt;!--
![guess key length; individually brute force caesar cipher interweaved to get plaintext;](interactive)
 --&gt;

&lt;p&gt;Using a key which is at least as long as the plaintext, and where each shift value is &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Random_number_generation#True_vs._pseudo-random_numbers&quot;&gt;truly random&lt;&#x2F;a&gt; will be &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Information-theoretic_security&quot;&gt;perfectly secure&lt;&#x2F;a&gt; — as long as the key is kept secret, and is &lt;strong&gt;never&lt;&#x2F;strong&gt; reused.&lt;&#x2F;p&gt;

&lt;svg id=&quot;bitarraySVG&quot; viewBox=&quot;0 0 200 75&quot; fill=&quot;none&quot; width=&quot;1200px&quot; height=&quot;450px&quot;&gt;
&lt;desc&gt;Bit array.&lt;&#x2F;desc&gt;
&lt;rect id=&quot;bitarrayBG&quot; fill=&quot;#aaa&quot; x=&quot;0&quot; y=&quot;0&quot; width=&quot;200&quot; height=&quot;150&quot; &#x2F;&gt;
&lt;&#x2F;svg&gt;
&lt;!--
![https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;One-time_pad#Example; encryption; button: generate random key;](interactive)

 --&gt;

&lt;p&gt;This cipher scheme, involving a truly random key that is as long as the plaintext is called the &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;One-time_pad&quot;&gt;one-time pad&lt;&#x2F;a&gt;. The only information that is leaked is the maximum possible length of the message. However as mentioned, the moment the same key is used more than once, its security benefits vanish. And hence the name.&lt;&#x2F;p&gt;
&lt;p&gt;To understand why reusing keys is dangerous, consider two different messages that are encrypted with the same key. Attackers can subtract the ciphertext of one message from the other to leak data about the plaintext. For example, if &lt;code&gt;m1&lt;&#x2F;code&gt; and &lt;code&gt;m2&lt;&#x2F;code&gt; are messages that are both encrypted with key &lt;code&gt;k&lt;&#x2F;code&gt; then:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;c1 = (m1 + k) mod 26&lt;&#x2F;code&gt;&lt;br &#x2F;&gt;
&lt;code&gt;c2 = (m2 + k) mod 26&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Subtracting ciphertext &lt;code&gt;c1&lt;&#x2F;code&gt; from &lt;code&gt;c2&lt;&#x2F;code&gt; eliminates &lt;code&gt;k&lt;&#x2F;code&gt; and reveals &lt;code&gt;m2 - m1 (mod 26)&lt;&#x2F;code&gt;. Attackers can use this information to break the cipher.&lt;&#x2F;p&gt;

&lt;svg id=&quot;bitarraySVG&quot; viewBox=&quot;0 0 200 75&quot; fill=&quot;none&quot; width=&quot;1200px&quot; height=&quot;450px&quot;&gt;
&lt;desc&gt;Bit array.&lt;&#x2F;desc&gt;
&lt;rect id=&quot;bitarrayBG&quot; fill=&quot;#aaa&quot; x=&quot;0&quot; y=&quot;0&quot; width=&quot;200&quot; height=&quot;150&quot; &#x2F;&gt;
&lt;&#x2F;svg&gt;
&lt;!--
![16x16 grascale images bit depth 4, showing leaked image — https:&#x2F;&#x2F;crypto.stackexchange.com&#x2F;a&#x2F;108; hovering over pixel show values of pixel value of image, key, encrypted-image, leaked image;](interactive)
 --&gt;

&lt;details  open  &gt;
&lt;summary&gt;Visualising plaintext leakage&lt;&#x2F;summary&gt;
This is an example of how difference in ciphertexts can leak information. Two grayscale images are both encrypted with the same key. An attacker can subtract one encrypted image from the other, exposing information about the original images.
&lt;&#x2F;details&gt;
&lt;h2 id=&quot;Vernam_Cipher&quot;&gt;Vernam Cipher&lt;&#x2F;h2&gt;
&lt;p&gt;Reducing the modulus of the one-time pad can make harware implementations easier. The &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Gilbert_Vernam#The_Vernam_cipher&quot;&gt;Vernam cipher&lt;&#x2F;a&gt; is a type of one-time pad that uses modulo two arithmetic. That is:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;c = (m + k) mod 2&lt;&#x2F;code&gt;&lt;br &#x2F;&gt;
&lt;code&gt;m = (c - k) mod 2&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Where &lt;code&gt;c&lt;&#x2F;code&gt; is the ciphertext for the binary plaintext message &lt;code&gt;m&lt;&#x2F;code&gt; encrypted using binary key &lt;code&gt;k&lt;&#x2F;code&gt;. Since the result of &lt;code&gt;n mod 2&lt;&#x2F;code&gt; is either zero or one, &lt;code&gt;c&lt;&#x2F;code&gt; is also binary. Addition and subtraction in modulo two arithmetic is the &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;GF(2)#Properties&quot;&gt;same&lt;&#x2F;a&gt;, so like ROT13, the same operation can be used for encryption and decryption:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;c = (m + k) mod 2&lt;&#x2F;code&gt;&lt;br &#x2F;&gt;
&lt;code&gt;m = (c + k) mod 2&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;

&lt;svg id=&quot;bitarraySVG&quot; viewBox=&quot;0 0 200 75&quot; fill=&quot;none&quot; width=&quot;1200px&quot; height=&quot;450px&quot;&gt;
&lt;desc&gt;Bit array.&lt;&#x2F;desc&gt;
&lt;rect id=&quot;bitarrayBG&quot; fill=&quot;#aaa&quot; x=&quot;0&quot; y=&quot;0&quot; width=&quot;200&quot; height=&quot;150&quot; &#x2F;&gt;
&lt;&#x2F;svg&gt;
&lt;!--
![https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;One-time_pad#Example; encryption &amp; decryption addition subtraction; show modular arithemtic 2; button for randomize key;](interactive)

 --&gt;

&lt;p&gt;Modulo two addition is implemented in hardware using &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;XOR_gate&quot;&gt;XOR gates&lt;&#x2F;a&gt;. So the ciphertext can be generated by combining a plaintext message with a key using the XOR operator:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;c = (m + k) mod 2 = m ⊕ k&lt;&#x2F;code&gt;&lt;br &#x2F;&gt;
&lt;code&gt;m = (c + k) mod 2 = c ⊕ k&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;

&lt;svg id=&quot;bitarraySVG&quot; viewBox=&quot;0 0 200 75&quot; fill=&quot;none&quot; width=&quot;1200px&quot; height=&quot;450px&quot;&gt;
&lt;desc&gt;Bit array.&lt;&#x2F;desc&gt;
&lt;rect id=&quot;bitarrayBG&quot; fill=&quot;#aaa&quot; x=&quot;0&quot; y=&quot;0&quot; width=&quot;200&quot; height=&quot;150&quot; &#x2F;&gt;
&lt;&#x2F;svg&gt;
&lt;!--
![https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;One-time_pad#Example; encryption &amp; decryption; show bitwise XOR; reuse key from above;](interactive)
 --&gt;

&lt;details  open  &gt;
&lt;summary&gt;The XOR operation&lt;&#x2F;summary&gt;
The &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Exclusive_or&quot;&gt;XOR operator&lt;&#x2F;a&gt; &lt;code&gt;⊕&lt;&#x2F;code&gt; takes two binary inputs and returns one if and only if one of the inputs is one, otherwise it returns zero — same as modulo two addtion using binary numbers.
&lt;&#x2F;details&gt;
&lt;p&gt;The binary key of the Vernam cipher is often referred to as a keystream, since it can be viewed as a stream of bits that is XOR-ed bitwise with the stream of plaintext bits to generate the ciphertext stream.&lt;&#x2F;p&gt;
&lt;p&gt;The Vernam cipher keystream must have the same properties as the one-time pad to be secure. It should be at least as long as the plaintext stream, and should be truly random. And again, the key should never be reused, as otherwise it can leak information about the plaintext:&lt;&#x2F;p&gt;

&lt;svg id=&quot;bitarraySVG&quot; viewBox=&quot;0 0 200 75&quot; fill=&quot;none&quot; width=&quot;1200px&quot; height=&quot;450px&quot;&gt;
&lt;desc&gt;Bit array.&lt;&#x2F;desc&gt;
&lt;rect id=&quot;bitarrayBG&quot; fill=&quot;#aaa&quot; x=&quot;0&quot; y=&quot;0&quot; width=&quot;200&quot; height=&quot;150&quot; &#x2F;&gt;
&lt;&#x2F;svg&gt;
&lt;!--
![binary image; same as above; https:&#x2F;&#x2F;crypto.stackexchange.com&#x2F;a&#x2F;108; hover over image to show bit values of the pixel of the image, key, encrypted-image;](interactive)
 --&gt;

&lt;details  open  &gt;
&lt;summary&gt;XOR self inverse&lt;&#x2F;summary&gt;
In XOR, a number is its own inverse. That is &lt;code&gt;x ⊕ x = 0&lt;&#x2F;code&gt; and &lt;code&gt;y ⊕ x ⊕ x&lt;&#x2F;code&gt; = &lt;code&gt;y ⊕ 0&lt;&#x2F;code&gt; = &lt;code&gt;y&lt;&#x2F;code&gt;. The XOR operations are also &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Associative_property&quot;&gt;associative&lt;&#x2F;a&gt; and &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Commutative_property&quot;&gt;commutative&lt;&#x2F;a&gt;. These properties can be exploited to leak plaintext data by XOR-ing two ciphertexts encrypted with the same key:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;c1 ⊕ c2&lt;&#x2F;code&gt;&lt;br &#x2F;&gt;
&lt;code&gt;= (m1 ⊕ k) ⊕ (m2 ⊕ k)&lt;&#x2F;code&gt;&lt;br &#x2F;&gt;
&lt;code&gt;= m1 ⊕ k ⊕ m2 ⊕ k&lt;&#x2F;code&gt;&lt;br &#x2F;&gt;
&lt;code&gt;= m1 ⊕ m2 ⊕ k ⊕ k&lt;&#x2F;code&gt;&lt;br &#x2F;&gt;
&lt;code&gt;= m1 ⊕ m2&lt;&#x2F;code&gt;
&lt;&#x2F;details&gt;
&lt;h2 id=&quot;ChaCha20_Cipher&quot;&gt;ChaCha20 Cipher&lt;&#x2F;h2&gt;
&lt;p&gt;Even though the Vernam cipher allows for easy encryption and decryption of data using computer hardware and is perfectly secure, it still relies on secure and secret distribution of keys, which is often impractical. If a key (which is at least the size of the message) can be securely transmitted, it makes more sense to simply send the message itself instead.&lt;&#x2F;p&gt;
&lt;p&gt;A simpler approach for exchanging keys is for the communicating parties to have a sort of a random number generator that somehow generates the &lt;strong&gt;same&lt;&#x2F;strong&gt; random keystream for both parties. Such random number generators &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Pseudorandom_number_generator&quot;&gt;do exist&lt;&#x2F;a&gt;. Most of them generate numbers that &lt;em&gt;appear&lt;&#x2F;em&gt; random from an initial value called the seed. For the same seed value, the same stream of random numbers is generated.&lt;&#x2F;p&gt;
&lt;p&gt;Communicating parties can then encrypt and decrypt messages by securely the seed values, and then encrypt and decrypt data using the random keystream generated by the random number generator.&lt;&#x2F;p&gt;

&lt;svg id=&quot;bitarraySVG&quot; viewBox=&quot;0 0 200 75&quot; fill=&quot;none&quot; width=&quot;1200px&quot; height=&quot;450px&quot;&gt;
&lt;desc&gt;Bit array.&lt;&#x2F;desc&gt;
&lt;rect id=&quot;bitarrayBG&quot; fill=&quot;#aaa&quot; x=&quot;0&quot; y=&quot;0&quot; width=&quot;200&quot; height=&quot;150&quot; &#x2F;&gt;
&lt;&#x2F;svg&gt;
&lt;!--
![party A, party B; input box for seed; show seeds being exchanged. button generate random keystream using seed; encryption decryption;](interactive)
 --&gt;

&lt;p&gt;However, there are caveats to this. Since the keystream is completely determined by the seed, it is not truly random and thefore not perfectly secure. But while it is not &lt;em&gt;perfectly&lt;&#x2F;em&gt; secure, it is still &lt;em&gt;reasonably&lt;&#x2F;em&gt; secure — as long as an attacker cannot easily recreate the original keystream.&lt;&#x2F;p&gt;
&lt;p&gt;One way to generate such pseudorandom keystreams is using ARX (add-rotate-XOR) operations on a seed value. The &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Salsa20#ChaCha_variant&quot;&gt;ChaCha20&lt;&#x2F;a&gt; cipher is an example of an &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Block_cipher#ARX_(add%E2%80%93rotate%E2%80%93XOR)&quot;&gt;ARX cipher&lt;&#x2F;a&gt; that uses a 512-bit value as its seed.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;ARX_Operations&quot;&gt;ARX Operations&lt;&#x2F;h3&gt;
&lt;p&gt;ChaCha20 generates a pseudorandom keystream from a 512-bit block by first dividing it into a 4x4 block of 32-bit &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Word_(computer_architecture)&quot;&gt;words&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;

&lt;svg id=&quot;bitarraySVG&quot; viewBox=&quot;0 0 200 75&quot; fill=&quot;none&quot; width=&quot;1200px&quot; height=&quot;450px&quot;&gt;
&lt;desc&gt;Bit array.&lt;&#x2F;desc&gt;
&lt;rect id=&quot;bitarrayBG&quot; fill=&quot;#aaa&quot; x=&quot;0&quot; y=&quot;0&quot; width=&quot;200&quot; height=&quot;150&quot; &#x2F;&gt;
&lt;&#x2F;svg&gt;
&lt;!--
![4x4 matrix words;](static)
 --&gt;

&lt;p&gt;A pseudorandom block is generated from this block by performing addition, rotation and XOR operations on the words. The ARX operations can be grouped into rounds, and each round can be divided into four quarter rounds. A quarter round operates on four words at a time, and is defined as:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;a += b; d ^= a; d &amp;lt;&amp;lt;&amp;lt;= 16;&lt;&#x2F;code&gt;&lt;br &#x2F;&gt;
&lt;code&gt;c += d; b ^= c; b &amp;lt;&amp;lt;&amp;lt;= 12;&lt;&#x2F;code&gt;&lt;br &#x2F;&gt;
&lt;code&gt;a += b; d ^= a; d &amp;lt;&amp;lt;&amp;lt;=  8;&lt;&#x2F;code&gt;&lt;br &#x2F;&gt;
&lt;code&gt;c += d; b ^= c; b &amp;lt;&amp;lt;&amp;lt;=  7;&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;These operations effectively ‘mix’ or &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;cr.yp.to&#x2F;snuffle&#x2F;diffusion.html&quot;&gt;diffuse&lt;&#x2F;a&gt; the bits of the four words with each other:&lt;&#x2F;p&gt;

&lt;svg id=&quot;bitarraySVG&quot; viewBox=&quot;0 0 200 75&quot; fill=&quot;none&quot; width=&quot;1200px&quot; height=&quot;450px&quot;&gt;
&lt;desc&gt;Bit array.&lt;&#x2F;desc&gt;
&lt;rect id=&quot;bitarrayBG&quot; fill=&quot;#aaa&quot; x=&quot;0&quot; y=&quot;0&quot; width=&quot;200&quot; height=&quot;150&quot; &#x2F;&gt;
&lt;&#x2F;svg&gt;
&lt;!--
![visualise as (onebyte, or 8 bit columns x 4 rows) x 4 bitboxes — hitps:&#x2F;&#x2F;crypto.stackexchange.com&#x2F;a&#x2F;108; https:&#x2F;&#x2F;cr.yp.to&#x2F;snuffle&#x2F;diffusion.html; highlight above equation; when running it;](interactive)
 --&gt;

&lt;p&gt;Performing the quarter rounds four times makes up one full round. On odd rounds, the quarter round is performed on all four columns of the matrix, while on even rounds, the quarter rounds is performed on the four left diagonals of the matrix. ChaCha20 specifies performing a total of twenty rounds, or ten odd rounds and ten even rounds.&lt;&#x2F;p&gt;

&lt;svg id=&quot;bitarraySVG&quot; viewBox=&quot;0 0 200 75&quot; fill=&quot;none&quot; width=&quot;1200px&quot; height=&quot;450px&quot;&gt;
&lt;desc&gt;Bit array.&lt;&#x2F;desc&gt;
&lt;rect id=&quot;bitarrayBG&quot; fill=&quot;#aaa&quot; x=&quot;0&quot; y=&quot;0&quot; width=&quot;200&quot; height=&quot;150&quot; &#x2F;&gt;
&lt;&#x2F;svg&gt;
&lt;!--
![same diffusion visutalisation as before but; highlight outline of words in 4x4 matrix to show round;](interactive&#x2F;animation)
 --&gt;

&lt;p&gt;Performing all the twenty rounds generates a pseudorandom 512-bit block. However it is not the part of the final keystream. The diffused block is first added to the original block before it forms a part of the keystream.&lt;&#x2F;p&gt;

&lt;svg id=&quot;bitarraySVG&quot; viewBox=&quot;0 0 200 75&quot; fill=&quot;none&quot; width=&quot;1200px&quot; height=&quot;450px&quot;&gt;
&lt;desc&gt;Bit array.&lt;&#x2F;desc&gt;
&lt;rect id=&quot;bitarrayBG&quot; fill=&quot;#aaa&quot; x=&quot;0&quot; y=&quot;0&quot; width=&quot;200&quot; height=&quot;150&quot; &#x2F;&gt;
&lt;&#x2F;svg&gt;
&lt;!--
![chacha block 20 rounds then addition;](interactive)
 --&gt;

&lt;p&gt;The addition step is important since the mixing rounds are invertible — without adding it to the original block, it is possible to apply the reverse operations on the pseudorandom block to produce the original block.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;Counter_&amp;amp;_Nonce&quot;&gt;Counter &amp;amp; Nonce&lt;&#x2F;h3&gt;
&lt;p&gt;The above operations generate a pseudorandom 512-bit block from a 512-bit seed block. This pseudorandom block can be XOR-ed with a 512-bit plaintext stream to produce the ciphertext.&lt;&#x2F;p&gt;

&lt;svg id=&quot;bitarraySVG&quot; viewBox=&quot;0 0 200 75&quot; fill=&quot;none&quot; width=&quot;1200px&quot; height=&quot;450px&quot;&gt;
&lt;desc&gt;Bit array.&lt;&#x2F;desc&gt;
&lt;rect id=&quot;bitarrayBG&quot; fill=&quot;#aaa&quot; x=&quot;0&quot; y=&quot;0&quot; width=&quot;200&quot; height=&quot;150&quot; &#x2F;&gt;
&lt;&#x2F;svg&gt;
&lt;!--
![IV block on left; chacha arrow in between; pseudorandom block on right; pseurand block expaneded into a stream below; xor operator below pseurand stream; plaintext stream below that; equal in between below; ciphertext below that;](interactive)
 --&gt;

&lt;p&gt;However to encrypt longer messages, more pseudorandom blocks are required. The blocks must not repeat and must be different from each other for them to be considered secure — or else an attacker can use the same techniques used to break the Vigenère cipher to break ChaCha20.&lt;&#x2F;p&gt;
&lt;p&gt;Producing more blocks which are different from the generated block using the same ARX operations on the same seed block is however, impossible. Since the ARX operations are deterministic, the same seed block always produces the same pseudorandom block. The only way to generate different blocks is to alter the operations, or alter the seed block.&lt;&#x2F;p&gt;
&lt;p&gt;Having a standard way to alter the initial state block is much cleaner than having altering operations for each block. Altering the initial state block can involve simply changing just a few bits — due to the cascading effects of diffusion, even a single bit flip results in a completely different pseudorandom block.&lt;&#x2F;p&gt;

&lt;svg id=&quot;bitarraySVG&quot; viewBox=&quot;0 0 200 75&quot; fill=&quot;none&quot; width=&quot;1200px&quot; height=&quot;450px&quot;&gt;
&lt;desc&gt;Bit array.&lt;&#x2F;desc&gt;
&lt;rect id=&quot;bitarrayBG&quot; fill=&quot;#aaa&quot; x=&quot;0&quot; y=&quot;0&quot; width=&quot;200&quot; height=&quot;150&quot; &#x2F;&gt;
&lt;&#x2F;svg&gt;
&lt;!--
![IV block on left — allow to change one bit; chacha result block on right;](interactive)
 --&gt;

&lt;p&gt;In ChaCha20, the last four words (128 bits) are reserved in the original 512-bit block for the sole purpose of generating new blocks. The four words are logically separated into two parts — a counter and a nonce.&lt;&#x2F;p&gt;

&lt;svg id=&quot;bitarraySVG&quot; viewBox=&quot;0 0 200 75&quot; fill=&quot;none&quot; width=&quot;1200px&quot; height=&quot;450px&quot;&gt;
&lt;desc&gt;Bit array.&lt;&#x2F;desc&gt;
&lt;rect id=&quot;bitarrayBG&quot; fill=&quot;#aaa&quot; x=&quot;0&quot; y=&quot;0&quot; width=&quot;200&quot; height=&quot;150&quot; &#x2F;&gt;
&lt;&#x2F;svg&gt;
&lt;!--
![4x4 with counter and nonce separation](static)
 --&gt;

&lt;p&gt;To encrypt longer messages, the counter gets incremented — and the the bit flips result in the creation of new, different blocks. Two words (64 bits) are assigned for the counter in ChaCha20. So, there can be 2^64 new blocks, each of size 512-bits. Thus, plaintext data of size of up to 1 ZiB can be encrypted using the keystream.&lt;&#x2F;p&gt;

&lt;svg id=&quot;bitarraySVG&quot; viewBox=&quot;0 0 200 75&quot; fill=&quot;none&quot; width=&quot;1200px&quot; height=&quot;450px&quot;&gt;
&lt;desc&gt;Bit array.&lt;&#x2F;desc&gt;
&lt;rect id=&quot;bitarrayBG&quot; fill=&quot;#aaa&quot; x=&quot;0&quot; y=&quot;0&quot; width=&quot;200&quot; height=&quot;150&quot; &#x2F;&gt;
&lt;&#x2F;svg&gt;
&lt;!--
![counter blocks all set to 0 at first — all black; pseudorandom number generation by chacha by incrementing counter; new blocks keep getting added to a stream of older blocks that keeping moving to the right to make space for the new blocks; xor operator in between below; plaintext below that; equal in between below; ciphertext below that;](interactive&#x2F;animation)
 --&gt;

&lt;p&gt;However, if the counter is reset to zero when sending a new message, and the counter values repeat — the output pseudorandom blocks will also repeat:&lt;&#x2F;p&gt;

&lt;svg id=&quot;bitarraySVG&quot; viewBox=&quot;0 0 200 75&quot; fill=&quot;none&quot; width=&quot;1200px&quot; height=&quot;450px&quot;&gt;
&lt;desc&gt;Bit array.&lt;&#x2F;desc&gt;
&lt;rect id=&quot;bitarrayBG&quot; fill=&quot;#aaa&quot; x=&quot;0&quot; y=&quot;0&quot; width=&quot;200&quot; height=&quot;150&quot; &#x2F;&gt;
&lt;&#x2F;svg&gt;
&lt;!--
![same as above; but no plaintext nor ciphertext streams; but multiple (maybe 4 in total) keystreams resetting&#x2F;stopping at smaller intervals;](interactive&#x2F;animation)
 --&gt;

&lt;p&gt;Encrypting data using reused keystreams (blocks) is dangerous. So the counter values must never repeat, and must always be incrementing. But this is not ideal. If any part of some message needs to be encrypted (or decrypted) again, it would require finding its corresponding counter value. The counter value is not just its position in the message — it would also need to take into account the the ordinal value of the message itself.&lt;&#x2F;p&gt;
&lt;p&gt;A cleaner approach to prevent repeating blocks, is by using a nonce. A nonce is simply a number used once. Whenever a new message needs to be encrypted a new and unique nonce is generated. This ensures the entire initial state block is always unique even if the counter values are not. And, since counters can repeat, they can then be used to truly represent positional information.&lt;&#x2F;p&gt;

&lt;svg id=&quot;bitarraySVG&quot; viewBox=&quot;0 0 200 75&quot; fill=&quot;none&quot; width=&quot;1200px&quot; height=&quot;450px&quot;&gt;
&lt;desc&gt;Bit array.&lt;&#x2F;desc&gt;
&lt;rect id=&quot;bitarrayBG&quot; fill=&quot;#aaa&quot; x=&quot;0&quot; y=&quot;0&quot; width=&quot;200&quot; height=&quot;150&quot; &#x2F;&gt;
&lt;&#x2F;svg&gt;
&lt;!--
![same as above; counters get reset — but nonce changes;](interactive)
 --&gt;

&lt;p&gt;The nonce is also two words (64 bits). So theoretically, a total of 2^64 messages, each of size 1 ZiB can be encrypted using a single seed block.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;Bit_Constants&quot;&gt;Bit Constants&lt;&#x2F;h3&gt;
&lt;p&gt;While very rare, there may be cases when the entire initial state is all zeroes. Diffusing bits that are all zeroes with each other does not generate a pseudorandom block but simply produces an all-zero block. Encrypting data with the all-zero block is dangerous as it does not encrypt the data at all since &lt;code&gt;m ⊕ 0 = m&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;

&lt;svg id=&quot;bitarraySVG&quot; viewBox=&quot;0 0 200 75&quot; fill=&quot;none&quot; width=&quot;1200px&quot; height=&quot;450px&quot;&gt;
&lt;desc&gt;Bit array.&lt;&#x2F;desc&gt;
&lt;rect id=&quot;bitarrayBG&quot; fill=&quot;#aaa&quot; x=&quot;0&quot; y=&quot;0&quot; width=&quot;200&quot; height=&quot;150&quot; &#x2F;&gt;
&lt;&#x2F;svg&gt;
&lt;!--
![all black block; generates all black block; xored with plaintext generates plaintext;](interactive)
 --&gt;

&lt;p&gt;To prevent the all-zero block, certain bits of the initial state block can always be set to one. In ChaCha20, the first four words (128 bits) of the initial state block are set to specific constants having non-zero values so that the four words, and by extension the entire block, will never be all zeroes.&lt;&#x2F;p&gt;

&lt;svg id=&quot;bitarraySVG&quot; viewBox=&quot;0 0 200 75&quot; fill=&quot;none&quot; width=&quot;1200px&quot; height=&quot;450px&quot;&gt;
&lt;desc&gt;Bit array.&lt;&#x2F;desc&gt;
&lt;rect id=&quot;bitarrayBG&quot; fill=&quot;#aaa&quot; x=&quot;0&quot; y=&quot;0&quot; width=&quot;200&quot; height=&quot;150&quot; &#x2F;&gt;
&lt;&#x2F;svg&gt;
&lt;!--
![4x4 block with counter, nonce, contant;](static)
 --&gt;

&lt;p&gt;The constant values avoid the all-zero block, but more importantly these constants can also &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;cr.yp.to&#x2F;snuffle&#x2F;security.pdf#page=5&quot;&gt;introduce asymmetry&lt;&#x2F;a&gt; if certain values are chosen. ChaCha20 has some rotational symmetry — different initial state blocks can generate the same output block, if the initial state blocks are specific &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Group_action&quot;&gt;rotated&lt;&#x2F;a&gt; versions of itself. Having fixed asymmetrical values for certain words eliminates the possibility of this shift&#x2F;rotate structure.&lt;&#x2F;p&gt;
&lt;p&gt;The asymmetric constants form the first four words of the intial state block and have the values 0x61707865, 0x3320646e, 0x79622d32, 0x6b206574. There is &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Nothing-up-my-sleeve_number&quot;&gt;nothing special&lt;&#x2F;a&gt; about these constants — they simply spell “expand 32-byte k” in &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;ASCII&quot;&gt;ASCII&lt;&#x2F;a&gt; in &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Endianness#&#x2F;media&#x2F;File:32bit-Endianess.svg&quot;&gt;little endian&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;

&lt;svg id=&quot;bitarraySVG&quot; viewBox=&quot;0 0 200 75&quot; fill=&quot;none&quot; width=&quot;1200px&quot; height=&quot;450px&quot;&gt;
&lt;desc&gt;Bit array.&lt;&#x2F;desc&gt;
&lt;rect id=&quot;bitarrayBG&quot; fill=&quot;#aaa&quot; x=&quot;0&quot; y=&quot;0&quot; width=&quot;200&quot; height=&quot;150&quot; &#x2F;&gt;
&lt;&#x2F;svg&gt;
&lt;!--
![4x4 block with counter, nonce, constants with name;](static)
 --&gt;

&lt;h3 id=&quot;Shared_Key&quot;&gt;Shared Key&lt;&#x2F;h3&gt;
&lt;p&gt;The constants, counter, and nonce values do not need to be exchanged securely — the counter and nonce keep changing often and it is impractical to securely exchange them frquently; while the constants too are public and standardised.&lt;&#x2F;p&gt;
&lt;p&gt;But even if half of the initial state block is non-secret, it is still secure since an attacker has to brute force the remaining 2^256 possible combinations for the remaining bits to guess the entire initial state block. This remaining half of the block, or eight words, is used for the actual ‘key’ and must be kept private between communicating parties.&lt;&#x2F;p&gt;

&lt;svg id=&quot;bitarraySVG&quot; viewBox=&quot;0 0 200 75&quot; fill=&quot;none&quot; width=&quot;1200px&quot; height=&quot;450px&quot;&gt;
&lt;desc&gt;Bit array.&lt;&#x2F;desc&gt;
&lt;rect id=&quot;bitarrayBG&quot; fill=&quot;#aaa&quot; x=&quot;0&quot; y=&quot;0&quot; width=&quot;200&quot; height=&quot;150&quot; &#x2F;&gt;
&lt;&#x2F;svg&gt;
&lt;!--
![4x4 block with counter, nonce, constants with name, keys;](static)
 --&gt;

&lt;p&gt;The key along with the constants, counter and nonce generate the keystream.&lt;&#x2F;p&gt;

&lt;svg id=&quot;bitarraySVG&quot; viewBox=&quot;0 0 200 75&quot; fill=&quot;none&quot; width=&quot;1200px&quot; height=&quot;450px&quot;&gt;
&lt;desc&gt;Bit array.&lt;&#x2F;desc&gt;
&lt;rect id=&quot;bitarrayBG&quot; fill=&quot;#aaa&quot; x=&quot;0&quot; y=&quot;0&quot; width=&quot;200&quot; height=&quot;150&quot; &#x2F;&gt;
&lt;&#x2F;svg&gt;
&lt;!--
![random key; nonce; counter keeps incrementing; forms a keystream; plaintext below; xor below between; ciphertext below;](interactive)
 --&gt;

&lt;h2 id=&quot;Authenticated_Encryption&quot;&gt;Authenticated Encryption&lt;&#x2F;h2&gt;
&lt;p&gt;Without the knowledge of the key, an attacker cannot easily guess the keystream and decrypt the ciphertext. But attackers can &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Bit-flipping_attack&quot;&gt;modify the ciphertext&lt;&#x2F;a&gt; itself — especially if they have some knowledge about the position of important bits in the plaintext stream.&lt;&#x2F;p&gt;

&lt;svg id=&quot;bitarraySVG&quot; viewBox=&quot;0 0 200 75&quot; fill=&quot;none&quot; width=&quot;1200px&quot; height=&quot;450px&quot;&gt;
&lt;desc&gt;Bit array.&lt;&#x2F;desc&gt;
&lt;rect id=&quot;bitarrayBG&quot; fill=&quot;#aaa&quot; x=&quot;0&quot; y=&quot;0&quot; width=&quot;200&quot; height=&quot;150&quot; &#x2F;&gt;
&lt;&#x2F;svg&gt;
&lt;!--
![bit flip attack; plaintext; xor keystream; ciphertext; altered ciphertext; xor keystream; altered plaintext;](interactive)
 --&gt;

&lt;details  open  &gt;
&lt;summary&gt;Calculating modified ciphertext&lt;&#x2F;summary&gt;
If an attacker knows a certain string occurs at some position, they can modify it by replacing the ciphertext at that position by XOR-ing it with the original string and the modified string. So, if a part of original ciphertext is &lt;code&gt;c = m ⊕ k&lt;&#x2F;code&gt;, it can be replaced by &lt;code&gt;c&#x27; = (m ⊕ k) ⊕ m ⊕ m&#x27;&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Decrypting &lt;code&gt;c&#x27;&lt;&#x2F;code&gt; results in &lt;code&gt;c&#x27; ⊕ k&lt;&#x2F;code&gt; = &lt;code&gt;(m ⊕ k ⊕ m ⊕ m&#x27;) ⊕ k&lt;&#x2F;code&gt; = &lt;code&gt;m ⊕ m ⊕ k ⊕ k ⊕ m&#x27;&lt;&#x2F;code&gt; = &lt;code&gt;m&#x27;&lt;&#x2F;code&gt; — the modified message, without ever knowing the original key &lt;code&gt;k&lt;&#x2F;code&gt;.
&lt;&#x2F;details&gt;
&lt;p&gt;ChaCha20 is not designed to detect nor protect against tampered ciphertexts. Because bit-flipping attacks can render the entire cipher useless, most stream ciphers are often paired with some sort of an authenticator to detect tampered ciphertexts. An encryption scheme that simultaneously encrypts a message as well as validates its authenticity is referred to as &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Authenticated_encryption&quot;&gt;authenticated encryption&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;Hashing&quot;&gt;Hashing&lt;&#x2F;h3&gt;
&lt;p&gt;A simple (but rather naive) way to verify the integrity of a message is to simply compare the sum of all the bytes of the plaintext message and the decrypted ciphertext — a very primitive &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Checksum&quot;&gt;checksum&lt;&#x2F;a&gt;. The checksum is usually calculated using modular addition to prevent the numbers from getting too big.&lt;&#x2F;p&gt;
&lt;p&gt;For example, the checksum of a message with bytes &lt;code&gt;C1&lt;&#x2F;code&gt;, &lt;code&gt;C2&lt;&#x2F;code&gt;, … &lt;code&gt;Cq&lt;&#x2F;code&gt;, and an arbitrarily chosen integer &lt;code&gt;p&lt;&#x2F;code&gt; is:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;(C1 + C2 + ... + Cq-1 + Cq) mod p&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;A sender can encrypt a message along with its checksum. The receiver can decrypt the message and compare the checksum of decrypted ciphertext with the one presented by the sender to verify its authenticity.&lt;&#x2F;p&gt;

&lt;svg id=&quot;bitarraySVG&quot; viewBox=&quot;0 0 200 75&quot; fill=&quot;none&quot; width=&quot;1200px&quot; height=&quot;450px&quot;&gt;
&lt;desc&gt;Bit array.&lt;&#x2F;desc&gt;
&lt;rect id=&quot;bitarrayBG&quot; fill=&quot;#aaa&quot; x=&quot;0&quot; y=&quot;0&quot; width=&quot;200&quot; height=&quot;150&quot; &#x2F;&gt;
&lt;&#x2F;svg&gt;
&lt;!--
![checksums; compare checksums;](interactive)
 --&gt;

&lt;p&gt;However it is not secure at all. Attackers can modify a few bits of the ciphertext and still have a very high chance that the checksum of the decrypted modified ciphertext will still produce the same checkum as the original plaintext message. For it to be secure, the checksum must not output the same (colliding) values if its input message is different. In other words, the checksum must have adequate collision resistance.&lt;&#x2F;p&gt;

&lt;svg id=&quot;bitarraySVG&quot; viewBox=&quot;0 0 200 75&quot; fill=&quot;none&quot; width=&quot;1200px&quot; height=&quot;450px&quot;&gt;
&lt;desc&gt;Bit array.&lt;&#x2F;desc&gt;
&lt;rect id=&quot;bitarrayBG&quot; fill=&quot;#aaa&quot; x=&quot;0&quot; y=&quot;0&quot; width=&quot;200&quot; height=&quot;150&quot; &#x2F;&gt;
&lt;&#x2F;svg&gt;
&lt;!--
![compare checksums and hashes; bit flip; compare checkum and hash after flipping a single bit; contrast with below polynomial hash;](interactive)
 --&gt;

&lt;p&gt;Instead of the naively adding all the bytes of the plaintext message, they can instead be evaluated as coefficients of a polynomial over a &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Finite_field&quot;&gt;prime field&lt;&#x2F;a&gt;. That is, the checksum for a message having bytes &lt;code&gt;C1&lt;&#x2F;code&gt;, &lt;code&gt;C2&lt;&#x2F;code&gt;, … &lt;code&gt;Cq&lt;&#x2F;code&gt; is:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;(C1·x^q + C2·x^(q-1) + ... + Cq-1·x^2 + Cq·x^1) mod p&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;This is called a &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Rolling_hash#Polynomial_rolling_hash&quot;&gt;polynomial rolling hash&lt;&#x2F;a&gt;, and the ‘checksum’ is called its hash. These hashes have much lower chances of collisions than the simple checksum method — for a well chosen integer &lt;code&gt;x&lt;&#x2F;code&gt; and big prime &lt;code&gt;p&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;

&lt;svg id=&quot;bitarraySVG&quot; viewBox=&quot;0 0 200 75&quot; fill=&quot;none&quot; width=&quot;1200px&quot; height=&quot;450px&quot;&gt;
&lt;desc&gt;Bit array.&lt;&#x2F;desc&gt;
&lt;rect id=&quot;bitarrayBG&quot; fill=&quot;#aaa&quot; x=&quot;0&quot; y=&quot;0&quot; width=&quot;200&quot; height=&quot;150&quot; &#x2F;&gt;
&lt;&#x2F;svg&gt;
&lt;!--
![compare checksums and hashes; bit flip; compare checkum and hash; compare between the methods by flipping a single bit;](interactive)
 --&gt;

&lt;details  open  &gt;
&lt;summary&gt;Hashing&lt;&#x2F;summary&gt;
A &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Hash_function&quot;&gt;hash function&lt;&#x2F;a&gt; is any function that maps an input to a fixed sized output, called the hash. Both the simple checksum and the polynomial hash use modular addition and thus always map to fixed range outputs. So technically, both are hash functions.
&lt;&#x2F;details&gt;
&lt;details  open  &gt;
&lt;summary&gt;Prime field&lt;&#x2F;summary&gt;
Performing the modulo operation limits the results to a finite set of elements. These elements form a &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Finite_field&quot;&gt;finite field&lt;&#x2F;a&gt; if the set satisfies certain &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Field_(mathematics)#Definition&quot;&gt;axioms&lt;&#x2F;a&gt; — properties of addition, subtraction, multiplication, and division must satisfied, for two defined binary operations. A prime field is a finite field with a prime number of elements.
&lt;&#x2F;details&gt;
&lt;p&gt;Again, the hash presented by the sender is compared with hash of the decrypted ciphertext. If the hashes match, there should be a reasonable amount of confidence that the message is authentic and has not been altered — since the chances of collisions are much lower.&lt;&#x2F;p&gt;

&lt;svg id=&quot;bitarraySVG&quot; viewBox=&quot;0 0 200 75&quot; fill=&quot;none&quot; width=&quot;1200px&quot; height=&quot;450px&quot;&gt;
&lt;desc&gt;Bit array.&lt;&#x2F;desc&gt;
&lt;rect id=&quot;bitarrayBG&quot; fill=&quot;#aaa&quot; x=&quot;0&quot; y=&quot;0&quot; width=&quot;200&quot; height=&quot;150&quot; &#x2F;&gt;
&lt;&#x2F;svg&gt;
&lt;!--
![hashed;](interactive)
 --&gt;

&lt;p&gt;Since these hashes values are used to verify the authenticity of messages, they are aptly called &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Message_authentication_code&quot;&gt;message authentication codes&lt;&#x2F;a&gt; or authentication tags. MACs generated using hash functions are called hash-based MACs or &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;HMAC&quot;&gt;HMACs&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;details  open  &gt;
&lt;summary&gt;MAC criteria&lt;&#x2F;summary&gt;
The above hash digests are technically not MACs because they are not considered to be adequately secure against forgeries. Generally, MACs use some shared secret information to verify the authenticity of messages.
&lt;&#x2F;details&gt;
&lt;h3 id=&quot;Keyed_Hashing&quot;&gt;Keyed Hashing&lt;&#x2F;h3&gt;
&lt;p&gt;The polynomial rolling hash acts on plaintext data, but ciphertexts can also be hashed. However, hashing the ciphertext (in this manner) is pointless. An adversary that can alter the ciphertext can also recalculate the hash of the altered ciphertext and then modify the MAC (hash) accordingly.&lt;&#x2F;p&gt;

&lt;svg id=&quot;bitarraySVG&quot; viewBox=&quot;0 0 200 75&quot; fill=&quot;none&quot; width=&quot;1200px&quot; height=&quot;450px&quot;&gt;
&lt;desc&gt;Bit array.&lt;&#x2F;desc&gt;
&lt;rect id=&quot;bitarrayBG&quot; fill=&quot;#aaa&quot; x=&quot;0&quot; y=&quot;0&quot; width=&quot;200&quot; height=&quot;150&quot; &#x2F;&gt;
&lt;&#x2F;svg&gt;
&lt;!--
![ciphertext and ciphertext hash; modifying ciphertext; recalculating ciphertext hash; modifying hash;](interactive)
 --&gt;

&lt;p&gt;When the plaintext is hashed however, an attacker cannot easily calculate how a change in the ciphertext changes the resulting MAC — because the attacker does not have the knowledge about the complete plaintext to recalculate its hash.&lt;&#x2F;p&gt;

&lt;svg id=&quot;bitarraySVG&quot; viewBox=&quot;0 0 200 75&quot; fill=&quot;none&quot; width=&quot;1200px&quot; height=&quot;450px&quot;&gt;
&lt;desc&gt;Bit array.&lt;&#x2F;desc&gt;
&lt;rect id=&quot;bitarrayBG&quot; fill=&quot;#aaa&quot; x=&quot;0&quot; y=&quot;0&quot; width=&quot;200&quot; height=&quot;150&quot; &#x2F;&gt;
&lt;&#x2F;svg&gt;
&lt;!--
![ciphertext and plaintext hash; modifying ciphertext; cannot recalculate plaintext hash since plaintext itself is unknown;](interactive)
 --&gt;

&lt;p&gt;When the plaintext is hashed, an encrypted message must be decrypted before it can be verified — but it is not preferable because it is &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;moxie.org&#x2F;2011&#x2F;12&#x2F;13&#x2F;the-cryptographic-doom-principle.html&quot;&gt;not completely secure&lt;&#x2F;a&gt;. The alternative is generating the MAC from the ciphertext. However as mentioned earlier, MACs generated by hashing ciphertexts is even less secure.&lt;&#x2F;p&gt;
&lt;p&gt;The reason hashing ciphertexts to authenticate messages is not secure at all is because MACs are generated solely from a public ciphertext. However, if the MACs can include secret information only known to the communicating parties as its input, it can be much more secure. The secret information can again be a shared secret key.&lt;&#x2F;p&gt;

&lt;svg id=&quot;bitarraySVG&quot; viewBox=&quot;0 0 200 75&quot; fill=&quot;none&quot; width=&quot;1200px&quot; height=&quot;450px&quot;&gt;
&lt;desc&gt;Bit array.&lt;&#x2F;desc&gt;
&lt;rect id=&quot;bitarrayBG&quot; fill=&quot;#aaa&quot; x=&quot;0&quot; y=&quot;0&quot; width=&quot;200&quot; height=&quot;150&quot; &#x2F;&gt;
&lt;&#x2F;svg&gt;
&lt;!--
![hash with ciphertext input vs hash with ciphertext AND secret key as input — diagram;](static)
 --&gt;

&lt;p&gt;One way to embed the key in a MAC is to include the the key while the hashing it. Using the example of the polynomial rolling hash, the hash can be generated by evaluating the polynomial at the value of the key:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;MAC = (C1·k^q + C2·k^(q-1) + ... + Cq-1·k^2 + Cq·k^1) mod p&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Here &lt;code&gt;k&lt;&#x2F;code&gt; is the secret key, &lt;code&gt;p&lt;&#x2F;code&gt; is a sufficiently big prime and &lt;code&gt;C1&lt;&#x2F;code&gt;, &lt;code&gt;C2&lt;&#x2F;code&gt;, … &lt;code&gt;Cq&lt;&#x2F;code&gt; are bytes of the &lt;strong&gt;ciphertext&lt;&#x2F;strong&gt;. Since the hash accepts a secret key alongside the message, this type of hashing is referred to as keyed hashing.&lt;&#x2F;p&gt;

&lt;svg id=&quot;bitarraySVG&quot; viewBox=&quot;0 0 200 75&quot; fill=&quot;none&quot; width=&quot;1200px&quot; height=&quot;450px&quot;&gt;
&lt;desc&gt;Bit array.&lt;&#x2F;desc&gt;
&lt;rect id=&quot;bitarrayBG&quot; fill=&quot;#aaa&quot; x=&quot;0&quot; y=&quot;0&quot; width=&quot;200&quot; height=&quot;150&quot; &#x2F;&gt;
&lt;&#x2F;svg&gt;
&lt;!--
![show with key this time](interactive)
 --&gt;

&lt;p&gt;But an even simpler way to include a secret key in a MAC is to simply add it to the hash of a ciphertext. Variable MACs or &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;VMAC&quot;&gt;VMACs&lt;&#x2F;a&gt; function very similar to this — a hash function is used to hash a message, which is combined with a one-time key using addition:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;MAC = (H(c) + k) mod p&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;For the VMAC to be secure, the hash function needs to be collision resistant, while the shared secret key &lt;code&gt;k&lt;&#x2F;code&gt; must be pseudorandom and must not be reused. Since the key is unique for every invocation, the MAC too is unique and varies every time, even for the same input — hence the name.&lt;&#x2F;p&gt;

&lt;svg id=&quot;bitarraySVG&quot; viewBox=&quot;0 0 200 75&quot; fill=&quot;none&quot; width=&quot;1200px&quot; height=&quot;450px&quot;&gt;
&lt;desc&gt;Bit array.&lt;&#x2F;desc&gt;
&lt;rect id=&quot;bitarrayBG&quot; fill=&quot;#aaa&quot; x=&quot;0&quot; y=&quot;0&quot; width=&quot;200&quot; height=&quot;150&quot; &#x2F;&gt;
&lt;&#x2F;svg&gt;
&lt;!--
![VMAC example](interactive)
 --&gt;

&lt;details  open  &gt;
&lt;summary&gt;VMAC as a masked hash&lt;&#x2F;summary&gt;
The VMAC can be thought of as a hash being ‘encrypted’ or masked with the one-time pad &lt;code&gt;k&lt;&#x2F;code&gt;. For the VMAC to have (similar) security guarantees as the one-time pad, &lt;code&gt;k&lt;&#x2F;code&gt; must be (pseudo)random, and must never be reused.
&lt;&#x2F;details&gt;
&lt;p&gt;Including a one-time key (technically a nonce) in the hash also makes it secure against &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Replay_attack&quot;&gt;replay attacks&lt;&#x2F;a&gt;, since replayed messages (duplicate messages having the same nonces) can simply be trivially rejected by the receiver.&lt;&#x2F;p&gt;

&lt;svg id=&quot;bitarraySVG&quot; viewBox=&quot;0 0 200 75&quot; fill=&quot;none&quot; width=&quot;1200px&quot; height=&quot;450px&quot;&gt;
&lt;desc&gt;Bit array.&lt;&#x2F;desc&gt;
&lt;rect id=&quot;bitarrayBG&quot; fill=&quot;#aaa&quot; x=&quot;0&quot; y=&quot;0&quot; width=&quot;200&quot; height=&quot;150&quot; &#x2F;&gt;
&lt;&#x2F;svg&gt;
&lt;!--
![attacker sending multiple money requests — replayed message getting rejected](static)
 --&gt;

&lt;p&gt;MACs incorporating secret keys are much harder to forge, allowing them to be used for authenticating ciphertexts. An attacker can modify the ciphertext, but cannot recalculate its MAC without the knowledge of the secret key.&lt;&#x2F;p&gt;

&lt;svg id=&quot;bitarraySVG&quot; viewBox=&quot;0 0 200 75&quot; fill=&quot;none&quot; width=&quot;1200px&quot; height=&quot;450px&quot;&gt;
&lt;desc&gt;Bit array.&lt;&#x2F;desc&gt;
&lt;rect id=&quot;bitarrayBG&quot; fill=&quot;#aaa&quot; x=&quot;0&quot; y=&quot;0&quot; width=&quot;200&quot; height=&quot;150&quot; &#x2F;&gt;
&lt;&#x2F;svg&gt;
&lt;!--
![attacker modifying hash — keyed hashing;](static)
 --&gt;

&lt;h2 id=&quot;Poly1305&quot;&gt;Poly1305&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Poly1305&quot;&gt;Poly1305&lt;&#x2F;a&gt; is a hash function, that is often used for generating one-time MACs. When it is used for authentication, it behaves as a kind of VMAC using a keyed polynomial rolling hash as well as a one-time shared secret key. So the Poly1305 MAC for a ciphertext is:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;MAC = (H(C, r) + s) mod 2^128&lt;&#x2F;code&gt;&lt;br &#x2F;&gt;
&lt;code&gt;H(C, r) = (C1·r^q + C2·r^(q-1) + ... + Cq·r^1) mod p&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Where &lt;code&gt;H(C, r)&lt;&#x2F;code&gt; is a polynomial rolling hash using the bytes of the ciphertext &lt;code&gt;C&lt;&#x2F;code&gt; as its coefficients, evaluated at the point &lt;code&gt;r&lt;&#x2F;code&gt; over a prime field &lt;code&gt;p&lt;&#x2F;code&gt;. Meanwhile &lt;code&gt;s&lt;&#x2F;code&gt; is a secret one-time key. The MAC is the modular addition of the results of two operations, over a sufficiently big integer (2^128).&lt;&#x2F;p&gt;

&lt;svg id=&quot;bitarraySVG&quot; viewBox=&quot;0 0 200 75&quot; fill=&quot;none&quot; width=&quot;1200px&quot; height=&quot;450px&quot;&gt;
&lt;desc&gt;Bit array.&lt;&#x2F;desc&gt;
&lt;rect id=&quot;bitarrayBG&quot; fill=&quot;#aaa&quot; x=&quot;0&quot; y=&quot;0&quot; width=&quot;200&quot; height=&quot;150&quot; &#x2F;&gt;
&lt;&#x2F;svg&gt;
&lt;!--
![mac calculation — show neatly; allow changing values;](interactive)
 --&gt;

&lt;p&gt;In Poly1305 MAC, certain parameters have been unambigously defined:&lt;&#x2F;p&gt;
&lt;p&gt;The coefficients of the polynomial &lt;code&gt;C1&lt;&#x2F;code&gt;, &lt;code&gt;C2&lt;&#x2F;code&gt;, … &lt;code&gt;Cq&lt;&#x2F;code&gt; are not single bytes of the input, but 16-byte chunks of the input interpreted as 17-byte chunks by appending a byte having the value one to each of the 16-byte chunks of the message. If the final chunk is smaller than 16-bytes, one is appended to the chunk and then zero padded to 17-bytes.&lt;&#x2F;p&gt;

&lt;svg id=&quot;bitarraySVG&quot; viewBox=&quot;0 0 200 75&quot; fill=&quot;none&quot; width=&quot;1200px&quot; height=&quot;450px&quot;&gt;
&lt;desc&gt;Bit array.&lt;&#x2F;desc&gt;
&lt;rect id=&quot;bitarrayBG&quot; fill=&quot;#aaa&quot; x=&quot;0&quot; y=&quot;0&quot; width=&quot;200&quot; height=&quot;150&quot; &#x2F;&gt;
&lt;&#x2F;svg&gt;
&lt;!--
![message into chunks; 16-&gt;17 chunks; zero pad final chunk;](interactive)
 --&gt;

&lt;p&gt;The inderminate of the polynomial, &lt;code&gt;r&lt;&#x2F;code&gt; is a shared secret key. It is a 16-byte little endian integer where the top four bits of bytes &lt;code&gt;r[3]&lt;&#x2F;code&gt;, &lt;code&gt;r[7]&lt;&#x2F;code&gt;, &lt;code&gt;r[11]&lt;&#x2F;code&gt;, and &lt;code&gt;r[15]&lt;&#x2F;code&gt;, as well as the bottom two bits of &lt;code&gt;r[4]&lt;&#x2F;code&gt;, &lt;code&gt;r[8]&lt;&#x2F;code&gt;, &lt;code&gt;r[12]&lt;&#x2F;code&gt; are all zeroes — to simplify and accelerate calculations.&lt;&#x2F;p&gt;

&lt;svg id=&quot;bitarraySVG&quot; viewBox=&quot;0 0 200 75&quot; fill=&quot;none&quot; width=&quot;1200px&quot; height=&quot;450px&quot;&gt;
&lt;desc&gt;Bit array.&lt;&#x2F;desc&gt;
&lt;rect id=&quot;bitarrayBG&quot; fill=&quot;#aaa&quot; x=&quot;0&quot; y=&quot;0&quot; width=&quot;200&quot; height=&quot;150&quot; &#x2F;&gt;
&lt;&#x2F;svg&gt;
&lt;!--
![16 bytes — do NOT represent as 4x4 matrix (to avoid confusion with chacha20); show cleared bits;](static)
 --&gt;

&lt;p&gt;The MAC is designed to be 128 bits long, and so the order of the prime field &lt;code&gt;p&lt;&#x2F;code&gt; should preferably be close to, and greater than 2^128. It was chosen to be 2^130 - 5 because its sparse form also &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;loup-vaillant.fr&#x2F;tutorials&#x2F;poly1305-design#poly1305s-prime-2130---5&quot;&gt;makes divisions easier&lt;&#x2F;a&gt;. The result is then reduced using modulo 2^128.&lt;&#x2F;p&gt;
&lt;p&gt;The other secret key &lt;code&gt;s&lt;&#x2F;code&gt; is a 128-bit pseudorandom number, which is added to the output of the polynomial rolling hash to mask it. The key &lt;code&gt;s&lt;&#x2F;code&gt; must never be reused.&lt;&#x2F;p&gt;

&lt;svg id=&quot;bitarraySVG&quot; viewBox=&quot;0 0 200 75&quot; fill=&quot;none&quot; width=&quot;1200px&quot; height=&quot;450px&quot;&gt;
&lt;desc&gt;Bit array.&lt;&#x2F;desc&gt;
&lt;rect id=&quot;bitarrayBG&quot; fill=&quot;#aaa&quot; x=&quot;0&quot; y=&quot;0&quot; width=&quot;200&quot; height=&quot;150&quot; &#x2F;&gt;
&lt;&#x2F;svg&gt;
&lt;!--
![hash modulo; then added; then modulo again;](interactive)
 --&gt;

&lt;p&gt;The result is a 16 byte, or 128 bit MAC generated from an input &lt;code&gt;C&lt;&#x2F;code&gt; of arbitrary length, and two 16-byte secret keys &lt;code&gt;r&lt;&#x2F;code&gt; and &lt;code&gt;s&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;

&lt;svg id=&quot;bitarraySVG&quot; viewBox=&quot;0 0 200 75&quot; fill=&quot;none&quot; width=&quot;1200px&quot; height=&quot;450px&quot;&gt;
&lt;desc&gt;Bit array.&lt;&#x2F;desc&gt;
&lt;rect id=&quot;bitarrayBG&quot; fill=&quot;#aaa&quot; x=&quot;0&quot; y=&quot;0&quot; width=&quot;200&quot; height=&quot;150&quot; &#x2F;&gt;
&lt;&#x2F;svg&gt;
&lt;!--
![message to MAC; input for r — randomize button; input for s — randomize button; input for message; shows poly1305 mac as output; maybe show equations in the background but greyed out;](interactive)
 --&gt;

&lt;h2 id=&quot;ChaCha20-Poly1305&quot;&gt;ChaCha20-Poly1305&lt;&#x2F;h2&gt;
&lt;p&gt;Poly1305 can be used to authenticate ciphertexts generated using ChaCha20. The keys for Poly1305, &lt;code&gt;r&lt;&#x2F;code&gt; and &lt;code&gt;s&lt;&#x2F;code&gt; can be derived from the keys used for ChaCha20. However the 256-bit key used in ChaCha cannot directly be used in Poly1305 — because the key is persistent, but &lt;code&gt;s&lt;&#x2F;code&gt; should always be unique for every MAC.&lt;&#x2F;p&gt;

&lt;svg id=&quot;bitarraySVG&quot; viewBox=&quot;0 0 200 75&quot; fill=&quot;none&quot; width=&quot;1200px&quot; height=&quot;450px&quot;&gt;
&lt;desc&gt;Bit array.&lt;&#x2F;desc&gt;
&lt;rect id=&quot;bitarrayBG&quot; fill=&quot;#aaa&quot; x=&quot;0&quot; y=&quot;0&quot; width=&quot;200&quot; height=&quot;150&quot; &#x2F;&gt;
&lt;&#x2F;svg&gt;
&lt;!--
![256 bit key top; left chacha block; arrow from key to chacha block; nonce and counter on left of chacha block — arrows from them to chacha block; right poly13 block; arrow from key to poly13 block — separates into two stream r &amp; s; update button — new message; key stays same; highlight key reuse for poly13 block;](interactive)
 --&gt;

&lt;p&gt;While the key used in ChaCha20 is persistent, its keystream is not — it is designed to generate unique keystreams for each message. Every time a new message needs to be authenticated, an extra pseudorandom block can be generated using ChaCha20, which can be used as the keys for Poly1305.&lt;&#x2F;p&gt;
&lt;p&gt;In ChaCha20-Poly1305, the extra block is generated by setting the counter of the initial state to zero for each new nonce (message). The rest of the keystream used to encrypt the plaintext message is generated by incrementing the counter, starting from one.&lt;&#x2F;p&gt;

&lt;svg id=&quot;bitarraySVG&quot; viewBox=&quot;0 0 200 75&quot; fill=&quot;none&quot; width=&quot;1200px&quot; height=&quot;450px&quot;&gt;
&lt;desc&gt;Bit array.&lt;&#x2F;desc&gt;
&lt;rect id=&quot;bitarrayBG&quot; fill=&quot;#aaa&quot; x=&quot;0&quot; y=&quot;0&quot; width=&quot;200&quot; height=&quot;150&quot; &#x2F;&gt;
&lt;&#x2F;svg&gt;
&lt;!--
![chacha-poly counter 0 block; new message — resets; new nonce; counter resets to 0; used for r,s; counter keeps incrmenting; initial block for keys; rest of blocks used for XORing plaintext — show as shown before (streams getting XORed);](interactive)
 --&gt;

&lt;p&gt;The size of the pseudorandom block is 512 bits, but only 256 bits are required for the key pair &lt;code&gt;r&lt;&#x2F;code&gt; and &lt;code&gt;s&lt;&#x2F;code&gt;. So only the first 256 bits are used, while the remaining bits are discarded. The first 128 bits are used for &lt;code&gt;r&lt;&#x2F;code&gt; while the next 128-bits are used for &lt;code&gt;s&lt;&#x2F;code&gt;. Additionally, bits of &lt;code&gt;r&lt;&#x2F;code&gt; are clamped to satisfy its requirements — top four and bottom two bits of specific bytes must be zero.&lt;&#x2F;p&gt;

&lt;svg id=&quot;bitarraySVG&quot; viewBox=&quot;0 0 200 75&quot; fill=&quot;none&quot; width=&quot;1200px&quot; height=&quot;450px&quot;&gt;
&lt;desc&gt;Bit array.&lt;&#x2F;desc&gt;
&lt;rect id=&quot;bitarrayBG&quot; fill=&quot;#aaa&quot; x=&quot;0&quot; y=&quot;0&quot; width=&quot;200&quot; height=&quot;150&quot; &#x2F;&gt;
&lt;&#x2F;svg&gt;
&lt;!--
![512 bit block — second half greyed out to indicate rejection; s used as is; r being clamped;](static&#x2F;interactive)
 --&gt;

&lt;p&gt;Because &lt;code&gt;r&lt;&#x2F;code&gt; and &lt;code&gt;s&lt;&#x2F;code&gt; are derived from a ChaCha20 block, which itself is dervied using a secret 256-bit key, the MAC cannot be easily forged without the knowledge of the 256-bit ChaCha20 key. The receiver of a message can then be reasonably confident that a message has not been been altered by anyone else and has been sent by someone having the same secret ChaCha20 key.&lt;&#x2F;p&gt;
&lt;p&gt;So messages are encrypted and authenticated using a single 256-bit key:&lt;&#x2F;p&gt;

&lt;svg id=&quot;bitarraySVG&quot; viewBox=&quot;0 0 200 75&quot; fill=&quot;none&quot; width=&quot;1200px&quot; height=&quot;450px&quot;&gt;
&lt;desc&gt;Bit array.&lt;&#x2F;desc&gt;
&lt;rect id=&quot;bitarrayBG&quot; fill=&quot;#aaa&quot; x=&quot;0&quot; y=&quot;0&quot; width=&quot;200&quot; height=&quot;150&quot; &#x2F;&gt;
&lt;&#x2F;svg&gt;
&lt;!--
![message being encrypted and authenitcated;](interactive)
 --&gt;

&lt;p&gt;It is worth noting that there are slight differences between ChaCha20 and the ChaCha20 used in ChaCha20-Poly1305. Unlike ChaCha20, the initial state in ChaCha20-Poly1305 uses a 32-bit counter and 96-bit nonce instead of a 64-bit counter and 64-bit nonce.&lt;&#x2F;p&gt;

&lt;svg id=&quot;bitarraySVG&quot; viewBox=&quot;0 0 200 75&quot; fill=&quot;none&quot; width=&quot;1200px&quot; height=&quot;450px&quot;&gt;
&lt;desc&gt;Bit array.&lt;&#x2F;desc&gt;
&lt;rect id=&quot;bitarrayBG&quot; fill=&quot;#aaa&quot; x=&quot;0&quot; y=&quot;0&quot; width=&quot;200&quot; height=&quot;150&quot; &#x2F;&gt;
&lt;&#x2F;svg&gt;
&lt;!--
![init state — chacha20 vs chacha20-poly1305;](static)
 --&gt;

&lt;p&gt;This allows more messages to be encrypted using the same key, albeit shorter ones. But it is not a problem, since a 32-bit counter still allows for encrypting messages of sizes up to 256 GiB.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;Associated_Data&quot;&gt;Associated Data&lt;&#x2F;h3&gt;
&lt;p&gt;Sometimes ciphetexts can be paired with some associated plaintext data, which need not or should not be encrypted, but still need to be verified — data such as message timestamps, addresses, protocol versions, etc. This cleartext data is often sent alongside the ciphertext, and both are authenticated using a single MAC. This additional data is called associated data, and an authenticated encryption scheme that authenticates the associated data alongside the ciphertext, is aptly referred to as &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Authenticated_encryption#Authenticated_encryption_with_associated_data&quot;&gt;authenticated encryption with associated data&lt;&#x2F;a&gt;, or AEAD.&lt;&#x2F;p&gt;
&lt;p&gt;ChaCha20-Poly1305 can authenticate ciphertext &lt;code&gt;C&lt;&#x2F;code&gt; along with some associated data &lt;code&gt;AD&lt;&#x2F;code&gt; by concatenating together, and treating them as a single unit to generate the MAC. The ChaCha20-Poly1305 specification defines &lt;code&gt;AD&lt;&#x2F;code&gt; and &lt;code&gt;C&lt;&#x2F;code&gt; to be separately padded to make their total sizes an even multiple of sixteen bytes. The padded &lt;code&gt;AD&lt;&#x2F;code&gt; and &lt;code&gt;C&lt;&#x2F;code&gt; as well as two other 64-bit fields, &lt;code&gt;len(AD)&lt;&#x2F;code&gt; and &lt;code&gt;len(C)&lt;&#x2F;code&gt;, are concatenated. Poly1305 then produces the MAC of the concatenated string.&lt;&#x2F;p&gt;

&lt;svg id=&quot;bitarraySVG&quot; viewBox=&quot;0 0 200 75&quot; fill=&quot;none&quot; width=&quot;1200px&quot; height=&quot;450px&quot;&gt;
&lt;desc&gt;Bit array.&lt;&#x2F;desc&gt;
&lt;rect id=&quot;bitarrayBG&quot; fill=&quot;#aaa&quot; x=&quot;0&quot; y=&quot;0&quot; width=&quot;200&quot; height=&quot;150&quot; &#x2F;&gt;
&lt;&#x2F;svg&gt;
&lt;!--
![all combined — https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;File:ChaCha20-Poly1305_Encryption.svg;](interative)
 --&gt;

&lt;details  &gt;
&lt;summary&gt;Message size limit&lt;&#x2F;summary&gt;
While Poly1305 can be used for authenticating messages of arbitrary length, the 64-bit fields for &lt;code&gt;len(AD)&lt;&#x2F;code&gt; and &lt;code&gt;len(C)&lt;&#x2F;code&gt; restricts the possible size of the associated data &lt;code&gt;AD&lt;&#x2F;code&gt; and the ciphertext message &lt;code&gt;C&lt;&#x2F;code&gt; to 2^64 bits, or 16 EiB. But ciphertext &lt;code&gt;C&lt;&#x2F;code&gt; is further bottlenecked by the 32-bit counter of the ChaCha20 initial state — limiting message sizes to only 256 GiB. If required however, the ChaCha20-Poly1305 specification permits changing the counter to be set to its original size of 64 bits to allow encrypting and authenticating longer messages.
&lt;&#x2F;details&gt;
&lt;p&gt;This is the entirety of &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;ChaCha20-Poly1305&quot;&gt;ChaCha20-Poly1305&lt;&#x2F;a&gt;, a stream cipher used to encrypt messages, and authenticate the encrypted messages along with some optional associated data. It used in &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Transport_Layer_Security#TLS_1.3&quot;&gt;TLS&lt;&#x2F;a&gt;, &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Secure_Shell#Algorithms&quot;&gt;SSH&lt;&#x2F;a&gt;, &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;WireGuard#Protocol&quot;&gt;WireGuard&lt;&#x2F;a&gt;, and &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;ChaCha20-Poly1305#Use&quot;&gt;other protocols&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;Security_Guarantees&quot;&gt;Security Guarantees&lt;&#x2F;h2&gt;
&lt;p&gt;The probability that attackers cannot decrypt a given ciphertext relies on the security of ChaCha20. Meanwhile the possibilities of forgeries depends on the security of Poly1305, as well as ChaCha20.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;Poly1305_Security&quot;&gt;Poly1305 Security&lt;&#x2F;h3&gt;
&lt;p&gt;Since the output of Poly1305 is combined with a pseudorandom pad, it is as secure as the algorithm used to generate pseudorandom number. However, it does not imply that it is perfectly secure if the pad is purely random — since collisions are still possible, as the of the size of the MAC is &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Pigeonhole_principle&quot;&gt;finite&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Consider a prime field &lt;i&gt;GF(p)&lt;&#x2F;i&gt;, taken as &lt;i&gt;x mod p&lt;&#x2F;i&gt; where &lt;i&gt;x ∈ ℤ&lt;&#x2F;i&gt; and &lt;i&gt;p&lt;&#x2F;i&gt; is a prime. Then, for some polynomial of degree one, e.g. &lt;i&gt;a·x = h&lt;&#x2F;i&gt; where &lt;i&gt;a,x,h ∈ GF(p)&lt;&#x2F;i&gt; — there exists only one solution or root for &lt;i&gt;x&lt;&#x2F;i&gt;. The probability that &lt;i&gt;x&lt;&#x2F;i&gt; will produce &lt;i&gt;h&lt;&#x2F;i&gt; for a given &lt;i&gt;a&lt;&#x2F;i&gt; is &lt;i&gt;1&#x2F;n&lt;&#x2F;i&gt;, where &lt;i&gt;n&lt;&#x2F;i&gt; is the number of all possible values for &lt;i&gt;x&lt;&#x2F;i&gt;. That is, &lt;i&gt;n = p&lt;&#x2F;i&gt;.&lt;&#x2F;p&gt;

&lt;svg id=&quot;bitarraySVG&quot; viewBox=&quot;0 0 200 75&quot; fill=&quot;none&quot; width=&quot;1200px&quot; height=&quot;450px&quot;&gt;
&lt;desc&gt;Bit array.&lt;&#x2F;desc&gt;
&lt;rect id=&quot;bitarrayBG&quot; fill=&quot;#aaa&quot; x=&quot;0&quot; y=&quot;0&quot; width=&quot;200&quot; height=&quot;150&quot; &#x2F;&gt;
&lt;&#x2F;svg&gt;
&lt;!--
![modulo heptagon, thirteen-agon etc (user selectable modulo); three in total; one on left selectable by user (a), one in middle, grayed out (x) — depends on a &amp; h; one on right selectable by user (h)](interactive)
 --&gt;

&lt;p&gt;For a polynomial of degree two, e.g. &lt;i&gt;a·x^2 + b·x = h&lt;&#x2F;i&gt;, there can be at most two solutions for &lt;i&gt;x&lt;&#x2F;i&gt;. The probability that &lt;i&gt;x&lt;&#x2F;i&gt; produces &lt;i&gt;h&lt;&#x2F;i&gt; for a given pair &lt;i&gt;a,b&lt;&#x2F;i&gt; is at most &lt;i&gt;2&#x2F;n&lt;&#x2F;i&gt;. Where &lt;i&gt;n&lt;&#x2F;i&gt; is the total number of possible values for &lt;i&gt;x&lt;&#x2F;i&gt;. Here again, &lt;i&gt;n = p&lt;&#x2F;i&gt;.&lt;&#x2F;p&gt;

&lt;svg id=&quot;bitarraySVG&quot; viewBox=&quot;0 0 200 75&quot; fill=&quot;none&quot; width=&quot;1200px&quot; height=&quot;450px&quot;&gt;
&lt;desc&gt;Bit array.&lt;&#x2F;desc&gt;
&lt;rect id=&quot;bitarrayBG&quot; fill=&quot;#aaa&quot; x=&quot;0&quot; y=&quot;0&quot; width=&quot;200&quot; height=&quot;150&quot; &#x2F;&gt;
&lt;&#x2F;svg&gt;
&lt;!--
![modulo heptagon, thirteen-agon etc (user selectable modulo); four in total; one on left selectable by user (a), two in middle, grayed out (x) — depends on a &amp; h; one on right selectable by user (h)](interactive)
 --&gt;

&lt;p&gt;Similary, for a &lt;i&gt;q&lt;&#x2F;i&gt; degree polynomial, e.g. &lt;i&gt;C1·x^q + C2·x^(q-1) + … + Cq·x^1 = h&lt;&#x2F;i&gt;, &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Fundamental_theorem_of_algebra&quot;&gt;there are at most&lt;&#x2F;a&gt; &lt;i&gt;q&lt;&#x2F;i&gt; number of roots for &lt;i&gt;x&lt;&#x2F;i&gt;, such that &lt;i&gt;x ∈ GF(p)&lt;&#x2F;i&gt;. Again, the probability that &lt;i&gt;x&lt;&#x2F;i&gt; produces &lt;i&gt;h&lt;&#x2F;i&gt; for some given coefficients is, at most &lt;i&gt;q&#x2F;n&lt;&#x2F;i&gt; — where &lt;i&gt;n&lt;&#x2F;i&gt; is again the number of possible values for &lt;i&gt;x&lt;&#x2F;i&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Now assume a message &lt;i&gt;m&lt;&#x2F;i&gt; has a polynomial hash &lt;i&gt;h&lt;&#x2F;i&gt;. The probability of another distinct message &lt;i&gt;m’&lt;&#x2F;i&gt; having the same hash digest &lt;i&gt;h&lt;&#x2F;i&gt; will then depend on the on the degree of its polynomial. The polynomial in Poly1305 is of the form C1·r^q + C2·r^(q-1) + … + Cq·r^1. The coefficients of the polynomial are constructed from 16-byte chunks of a message, and thus, the degree of the polynomial is &lt;i&gt;⌈L&#x2F;16⌉&lt;&#x2F;i&gt; — where &lt;i&gt;L&lt;&#x2F;i&gt; is the length of the message. So the probablity of a message &lt;i&gt;m’&lt;&#x2F;i&gt; having the (same) hash &lt;i&gt;h&lt;&#x2F;i&gt; is at most &lt;i&gt;⌈L&#x2F;16⌉&#x2F;n&lt;&#x2F;i&gt;.&lt;&#x2F;p&gt;

&lt;svg id=&quot;bitarraySVG&quot; viewBox=&quot;0 0 200 75&quot; fill=&quot;none&quot; width=&quot;1200px&quot; height=&quot;450px&quot;&gt;
&lt;desc&gt;Bit array.&lt;&#x2F;desc&gt;
&lt;rect id=&quot;bitarrayBG&quot; fill=&quot;#aaa&quot; x=&quot;0&quot; y=&quot;0&quot; width=&quot;200&quot; height=&quot;150&quot; &#x2F;&gt;
&lt;&#x2F;svg&gt;
&lt;!--
![from m to L to q to h;](static)
 --&gt;

&lt;p&gt;Since the indeterminate of the polynomial in Poly1305 &lt;i&gt;r&lt;&#x2F;i&gt; is a 128-bit number with 22 bits always set to zero, the number of possible values for &lt;i&gt;r&lt;&#x2F;i&gt; is 2^106. Thus, the probability of a message having a specific hash is at most &lt;i&gt;⌈L&#x2F;16⌉&#x2F;2^106&lt;&#x2F;i&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;However, the polynomial is evaluated in &lt;i&gt;GF(p)&lt;&#x2F;i&gt; — the result is &lt;i&gt;h ∈ [0, 2^130 - 5)&lt;&#x2F;i&gt;, while the hash in Poly1305 is designed to be of 128 bits. So &lt;i&gt;h&lt;&#x2F;i&gt; is reduced modulo 2^128. Discarding two bits from &lt;i&gt;h&lt;&#x2F;i&gt; causes some outputs to be &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Modular_arithmetic#Congruence&quot;&gt;congruent&lt;&#x2F;a&gt; to others. More specifically, there are eight congurent values (mod 2^128) in &lt;i&gt;h&lt;&#x2F;i&gt; for every &lt;i&gt;H(m)&lt;&#x2F;i&gt; and &lt;i&gt;H(m’)&lt;&#x2F;i&gt;.&lt;&#x2F;p&gt;

&lt;svg id=&quot;bitarraySVG&quot; viewBox=&quot;0 0 200 75&quot; fill=&quot;none&quot; width=&quot;1200px&quot; height=&quot;450px&quot;&gt;
&lt;desc&gt;Bit array.&lt;&#x2F;desc&gt;
&lt;rect id=&quot;bitarrayBG&quot; fill=&quot;#aaa&quot; x=&quot;0&quot; y=&quot;0&quot; width=&quot;200&quot; height=&quot;150&quot; &#x2F;&gt;
&lt;&#x2F;svg&gt;
&lt;!--
![00xx... = 01xx... = 10xx... = 11xx... on top for m1 and on bottom for m2 — on left; xx... on right — sigynifying actual 128-bit hash value;](static)
 --&gt;

&lt;p&gt;This increases the differential probability to &lt;i&gt;8·⌈L&#x2F;16⌉&#x2F;2^106&lt;&#x2F;i&gt;, at most — because there are now eight times as many possibilities for two messages to have the same hash.&lt;&#x2F;p&gt;
&lt;p&gt;Now if &lt;i&gt;D&lt;&#x2F;i&gt; forgery attempts are made, then the probability of a single successful forgery is at most &lt;i&gt;D·8·⌈L&#x2F;16⌉&#x2F;2^106&lt;&#x2F;i&gt;. The probability of forgeries is &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;cr.yp.to&#x2F;mac&#x2F;poly1305-20050329.pdf&quot;&gt;independent&lt;&#x2F;a&gt; of the number of messages authenticated — if the pad is &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Discrete_uniform_distribution&quot;&gt;uniformly random&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;details  &gt;
&lt;summary&gt;Influence of the pad on probability of forgeries&lt;&#x2F;summary&gt;
Generally, the pad is generated by a function &lt;i&gt;f&lt;&#x2F;i&gt; that maps a smaller nonce to a larger output space. If &lt;i&gt;f&lt;&#x2F;i&gt; has a uniform random distribution, then the probability that the pad is some specific number is &lt;i&gt;1&#x2F;G&lt;&#x2F;i&gt;, where &lt;i&gt;G&lt;&#x2F;i&gt; is the total number of elements in the output space. If the probability the pad is a specific number is &lt;i&gt;1&#x2F;G&lt;&#x2F;i&gt;, the probability that the pads are &lt;i&gt;C&lt;&#x2F;i&gt; specific numbers — or the probability that &lt;i&gt;f&lt;&#x2F;i&gt; interpolates &lt;i&gt;C&lt;&#x2F;i&gt; specific points is, at most &lt;i&gt;1&#x2F;G · 1&#x2F;G · … · 1&#x2F;G = 1&#x2F;(G^C)&lt;&#x2F;i&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;A uniform random &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Injective_function&quot;&gt;injective function&lt;&#x2F;a&gt; that has non-repeating nonces as its input can also be used for generating the pad. Then, the pad will not also repeat. The probability that it interpolates &lt;i&gt;C&lt;&#x2F;i&gt; number of distinct points is then &lt;i&gt;1&#x2F;G · 1&#x2F;(G-1) · 1&#x2F;(G-2) · … · 1&#x2F;(G-(C-1))&lt;&#x2F;i&gt;. This can be simplified to &lt;i&gt;((1 − (C − 1)&#x2F;G)^−(C&#x2F;2))&#x2F;(G)^C&lt;&#x2F;i&gt;. This can be used for evaluating the probability when &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Advanced_Encryption_Standard&quot;&gt;AES&lt;&#x2F;a&gt; is used as &lt;i&gt;f&lt;&#x2F;i&gt; — e.g. in Poly1305-AES.&lt;&#x2F;p&gt;
&lt;p&gt;If &lt;i&gt;f&lt;&#x2F;i&gt; has a maximum C-interpolation probability at most &lt;i&gt;δ&#x2F;(G^C)&lt;&#x2F;i&gt; and a maximum (C + 1)-interpolation probability at most &lt;i&gt;δε&#x2F;(G^C)&lt;&#x2F;i&gt;, then the &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;cr.yp.to&#x2F;antiforgery&#x2F;securitywcs-20050227.pdf#page=9&quot;&gt;probability of a successful forgery&lt;&#x2F;a&gt; using &lt;i&gt;C&lt;&#x2F;i&gt; distinct messages is &lt;i&gt;Dδε&lt;&#x2F;i&gt;, where &lt;i&gt;ε&lt;&#x2F;i&gt; is the probability of two messages having the same hash.&lt;&#x2F;p&gt;
&lt;p&gt;The pad in Poly1305 of ChaCha20-Poly1305 is generated using a ChaCha20 block, and can be assumed to have an interpolation probability of &lt;i&gt;1&#x2F;(G^C)&lt;&#x2F;i&gt; as there is no restriction on pad repetition. So the probability of a successful forgery using &lt;i&gt;C&lt;&#x2F;i&gt; messages is at most &lt;i&gt;Dε&lt;&#x2F;i&gt;, or &lt;i&gt;D·8·⌈L&#x2F;16⌉&#x2F;2^106&lt;&#x2F;i&gt; — it is independent of the number of message authentications.&lt;&#x2F;p&gt;
&lt;p&gt;It is important to note that ChaCha20 blocks may still be distinguished from true random numbers with some different probability &lt;i&gt;δ&lt;&#x2F;i&gt;, which affects the overall probability of successful forgeries.
&lt;&#x2F;details&gt;
&lt;p&gt;However, the Poly1305 pad in ChaCha20-Poly1305 is generated using a pseudorandom ChaCha20 block — it is not guaranteed to be truly uniformly random. If the probability of distinguishing a ChaCha20 block from a truly random keystream is &lt;i&gt;δ&lt;&#x2F;i&gt;, then the probability of a successful forgery is, at most &lt;i&gt;δ + D·8·⌈L&#x2F;16⌉&#x2F;2^106&lt;&#x2F;i&gt;.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;ChaCha20_Security&quot;&gt;ChaCha20 Security&lt;&#x2F;h3&gt;
&lt;p&gt;The randomness of the output of the ChaCha20 stream determines the security of the ciphertext, as well as the security of Poly1305. For true uniform randomness, each bit must have an equal probability of being zero or one.&lt;&#x2F;p&gt;
&lt;p&gt;Changing the initial state of a ChaCha20 block (even by a single bit flip) should ideally create a new uniform random block of bits. If the &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;cr.yp.to&#x2F;snuffle&#x2F;security.pdf#page=5&quot;&gt;initial state is changed&lt;&#x2F;a&gt;, the probability of any bit of the output block flipping &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Avalanche_effect#Strict_avalanche_criterion&quot;&gt;should be half&lt;&#x2F;a&gt; — on average, &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Confusion_and_diffusion#Diffusion&quot;&gt;half the bits should flip&lt;&#x2F;a&gt; for a change in the initial state. Or more specifically, the &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Hamming_distance&quot;&gt;number of bit flips&lt;&#x2F;a&gt; due to changes the inital state should form a &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Binomial_distribution&quot;&gt;binomial distribution&lt;&#x2F;a&gt; centered around half the bit length of the output block.&lt;&#x2F;p&gt;

&lt;svg id=&quot;bitarraySVG&quot; viewBox=&quot;0 0 200 75&quot; fill=&quot;none&quot; width=&quot;1200px&quot; height=&quot;450px&quot;&gt;
&lt;desc&gt;Bit array.&lt;&#x2F;desc&gt;
&lt;rect id=&quot;bitarrayBG&quot; fill=&quot;#aaa&quot; x=&quot;0&quot; y=&quot;0&quot; width=&quot;200&quot; height=&quot;150&quot; &#x2F;&gt;
&lt;&#x2F;svg&gt;
&lt;!--
![button to change state; show changes in output state -&gt; hamming distance -&gt; plot bino distribution;](aaa)
 --&gt;

&lt;p&gt;Empirical evidence suggests, it is the case. ChaCha20 produces output blocks that look uniformly random. Evaluating the randomess analytically is much more difficult however, because the interaction between the bits of the block quickly grows complex with each round. While there are ways to &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;webdoc.sub.gwdg.de&#x2F;ebook&#x2F;dissts&#x2F;Bochum&#x2F;Daum2005.pdf#page=57&quot;&gt;measure the avalanche effect&lt;&#x2F;a&gt; — small changes flipping roughly half the bits, there is no proof that ChaCha20 blocks blocks can be distinguished (or not) from truly uniform random bitstreams.&lt;&#x2F;p&gt;
&lt;p&gt;There are however other ways to test its security — for example, using &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Linear_cryptanalysis&quot;&gt;linear&lt;&#x2F;a&gt;, &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Differential_cryptanalysis&quot;&gt;differential&lt;&#x2F;a&gt; or &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Rotational_cryptanalysis&quot;&gt;rotational&lt;&#x2F;a&gt; &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Cryptanalysis&quot;&gt;cryptanlysis&lt;&#x2F;a&gt;. ChaCha with six rounds has been &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;cr.yp.to&#x2F;streamciphers&#x2F;attacks.html#chacha6&quot;&gt;broken&lt;&#x2F;a&gt;, but there have been no successful attacks on twenty rounds of ChaCha.&lt;&#x2F;p&gt;
&lt;p&gt;ChaCha20-Poly1305, therefore is generally &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.cryptrec.go.jp&#x2F;exreport&#x2F;cryptrec-ex-2601-2016.pdf&quot;&gt;considered secure&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;References&quot;&gt;References&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;Daniel J. Bernstein: &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;cr.yp.to&#x2F;chacha&#x2F;chacha-20080128.pdf&quot;&gt;ChaCha, a variant of Salsa20&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Daniel J. Bernstein: &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;cr.yp.to&#x2F;mac&#x2F;poly1305-20050329.pdf&quot;&gt;The Poly1305-AES message-authentication code&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;IRTF RFC 8439: &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;datatracker.ietf.org&#x2F;doc&#x2F;html&#x2F;rfc8439&quot;&gt;ChaCha20 and Poly1305 for IETF Protocols&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>Spotify Wrapped</title>
        <published>2024-12-13T00:00:00+00:00</published>
        <updated>2024-12-13T00:00:00+00:00</updated>
        <author><name>Anchit Roy</name></author>
        <link rel="alternate" type="text/html" href="https://ekunazanu.dev/lab/spotify-wrapped/"/>
        <id>https://ekunazanu.dev/lab/spotify-wrapped/</id>
        <summary type="html">Analyzing and visualizing six years of Spotify data.</summary>
        <content type="html" xml:base="https://ekunazanu.dev/lab/spotify-wrapped/">&lt;p&gt;This is one of the more experimental posts.&lt;&#x2F;p&gt;
&lt;p&gt;Spotify annually releases &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Spotify_Wrapped&quot;&gt;Spotify Wrapped&lt;&#x2F;a&gt; — a visual compilation of user listening data for the calendar year (roughly). My biggest gripe with it is that it does not show data from previous years. I like being able to see how my music tastes have evolved over the years rather than just the current year.&lt;&#x2F;p&gt;
&lt;p&gt;So I manually downloaded all my data, and had a go at visualising it myself using &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;d3js.org&#x2F;&quot;&gt;D3&lt;&#x2F;a&gt;. The source is &lt;a href=&quot;https:&#x2F;&#x2F;ekunazanu.dev&#x2F;lab&#x2F;spotify-wrapped&#x2F;INSERT_LINK_CHECK_PLS&quot;&gt;available here&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;

&lt;!--
&lt;svg id=&quot;graphSVG&quot; viewBox=&quot;0 0 633 81&quot; fill=&quot;none&quot; width=&quot;633&quot;&gt;
&lt;desc&gt;Spotify graph.&lt;&#x2F;desc&gt;
&lt;rect id=&quot;graphBG&quot; fill=&quot;#fff&quot; x=&quot;0&quot; y=&quot;0&quot; width=&quot;211&quot; height=&quot;27&quot; &#x2F;&gt;
&lt;g id=&quot;graphGroupSquares&quot;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;0&quot;   y=&quot;0&quot;  fill=&quot;#ccc&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;0&quot;   y=&quot;12&quot;  fill=&quot;#ccc&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;0&quot;   y=&quot;24&quot;  fill=&quot;#ccc&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;0&quot;   y=&quot;36&quot; fill=&quot;#ccc&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;0&quot;   y=&quot;48&quot; fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;0&quot;   y=&quot;60&quot; fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;0&quot;   y=&quot;72&quot; fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;12&quot;   y=&quot;0&quot;  fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;12&quot;   y=&quot;12&quot;  fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;12&quot;   y=&quot;24&quot;  fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;12&quot;   y=&quot;36&quot; fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;12&quot;   y=&quot;48&quot; fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;12&quot;   y=&quot;60&quot; fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;12&quot;   y=&quot;72&quot; fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;24&quot;   y=&quot;0&quot;  fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;24&quot;   y=&quot;12&quot;  fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;24&quot;   y=&quot;24&quot;  fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;24&quot;   y=&quot;36&quot; fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;24&quot;   y=&quot;48&quot; fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;24&quot;   y=&quot;60&quot; fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;24&quot;   y=&quot;72&quot; fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;36&quot;  y=&quot;0&quot;  fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;36&quot;  y=&quot;12&quot;  fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;36&quot;  y=&quot;24&quot;  fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;36&quot;  y=&quot;36&quot; fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;36&quot;  y=&quot;48&quot; fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;36&quot;  y=&quot;60&quot; fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;36&quot;  y=&quot;72&quot; fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;48&quot;  y=&quot;0&quot;  fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;48&quot;  y=&quot;12&quot;  fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;48&quot;  y=&quot;24&quot;  fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;48&quot;  y=&quot;36&quot; fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;48&quot;  y=&quot;48&quot; fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;48&quot;  y=&quot;60&quot; fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;48&quot;  y=&quot;72&quot; fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;60&quot;  y=&quot;0&quot;  fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;60&quot;  y=&quot;12&quot;  fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;60&quot;  y=&quot;24&quot;  fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;60&quot;  y=&quot;36&quot; fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;60&quot;  y=&quot;48&quot; fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;60&quot;  y=&quot;60&quot; fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;60&quot;  y=&quot;72&quot; fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;72&quot;  y=&quot;0&quot;  fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;72&quot;  y=&quot;12&quot;  fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;72&quot;  y=&quot;24&quot;  fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;72&quot;  y=&quot;36&quot; fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;72&quot;  y=&quot;48&quot; fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;72&quot;  y=&quot;60&quot; fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;72&quot;  y=&quot;72&quot; fill=&quot;#aaa&quot; &#x2F;&gt;

&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;84&quot;  y=&quot;0&quot;  fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;84&quot;  y=&quot;12&quot;  fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;84&quot;  y=&quot;24&quot;  fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;84&quot;  y=&quot;36&quot; fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;84&quot;  y=&quot;48&quot; fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;84&quot;  y=&quot;60&quot; fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;84&quot;  y=&quot;72&quot; fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;96&quot;  y=&quot;0&quot;  fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;96&quot;  y=&quot;12&quot;  fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;96&quot;  y=&quot;24&quot;  fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;96&quot;  y=&quot;36&quot; fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;96&quot;  y=&quot;48&quot; fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;96&quot;  y=&quot;60&quot; fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;96&quot;  y=&quot;72&quot; fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;108&quot;  y=&quot;0&quot;  fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;108&quot;  y=&quot;12&quot;  fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;108&quot;  y=&quot;24&quot;  fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;108&quot;  y=&quot;36&quot; fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;108&quot;  y=&quot;48&quot; fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;108&quot;  y=&quot;60&quot; fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;108&quot;  y=&quot;72&quot; fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;120&quot;  y=&quot;0&quot;  fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;120&quot;  y=&quot;12&quot;  fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;120&quot;  y=&quot;24&quot;  fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;120&quot;  y=&quot;36&quot; fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;120&quot;  y=&quot;48&quot; fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;120&quot;  y=&quot;60&quot; fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;120&quot;  y=&quot;72&quot; fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;132&quot;  y=&quot;0&quot;  fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;132&quot;  y=&quot;12&quot;  fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;132&quot;  y=&quot;24&quot;  fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;132&quot;  y=&quot;36&quot; fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;132&quot;  y=&quot;48&quot; fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;132&quot;  y=&quot;60&quot; fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;132&quot;  y=&quot;72&quot; fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;144&quot;  y=&quot;0&quot;  fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;144&quot;  y=&quot;12&quot;  fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;144&quot;  y=&quot;24&quot;  fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;144&quot;  y=&quot;36&quot; fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;144&quot;  y=&quot;48&quot; fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;144&quot;  y=&quot;60&quot; fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;144&quot;  y=&quot;72&quot; fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;156&quot;  y=&quot;0&quot;  fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;156&quot;  y=&quot;12&quot;  fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;156&quot;  y=&quot;24&quot;  fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;156&quot;  y=&quot;36&quot; fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;156&quot;  y=&quot;48&quot; fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;156&quot;  y=&quot;60&quot; fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;156&quot;  y=&quot;72&quot; fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;168&quot;  y=&quot;0&quot;  fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;168&quot;  y=&quot;12&quot;  fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;168&quot;  y=&quot;24&quot;  fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;168&quot;  y=&quot;36&quot; fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;168&quot;  y=&quot;48&quot; fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;168&quot;  y=&quot;60&quot; fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;168&quot;  y=&quot;72&quot; fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;180&quot;  y=&quot;0&quot;  fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;180&quot;  y=&quot;12&quot;  fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;180&quot;  y=&quot;24&quot;  fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;180&quot;  y=&quot;36&quot; fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;180&quot;  y=&quot;48&quot; fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;180&quot;  y=&quot;60&quot; fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;180&quot;  y=&quot;72&quot; fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;192&quot;  y=&quot;0&quot;  fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;192&quot;  y=&quot;12&quot;  fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;192&quot;  y=&quot;24&quot;  fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;192&quot;  y=&quot;36&quot; fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;192&quot;  y=&quot;48&quot; fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;192&quot;  y=&quot;60&quot; fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;192&quot;  y=&quot;72&quot; fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;204&quot;  y=&quot;0&quot;  fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;204&quot;  y=&quot;12&quot;  fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;204&quot;  y=&quot;24&quot;  fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;204&quot;  y=&quot;36&quot; fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;204&quot;  y=&quot;48&quot; fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;204&quot;  y=&quot;60&quot; fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;204&quot;  y=&quot;72&quot; fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;216&quot;  y=&quot;0&quot;  fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;216&quot;  y=&quot;12&quot;  fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;216&quot;  y=&quot;24&quot;  fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;216&quot;  y=&quot;36&quot; fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;216&quot;  y=&quot;48&quot; fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;216&quot;  y=&quot;60&quot; fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;216&quot;  y=&quot;72&quot; fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;228&quot;  y=&quot;0&quot;  fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;228&quot;  y=&quot;12&quot;  fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;228&quot;  y=&quot;24&quot;  fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;228&quot;  y=&quot;36&quot; fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;228&quot;  y=&quot;48&quot; fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;228&quot;  y=&quot;60&quot; fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;228&quot;  y=&quot;72&quot; fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;240&quot;  y=&quot;0&quot;  fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;240&quot;  y=&quot;12&quot;  fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;240&quot;  y=&quot;24&quot;  fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;240&quot;  y=&quot;36&quot; fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;240&quot;  y=&quot;48&quot; fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;240&quot;  y=&quot;60&quot; fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;240&quot;  y=&quot;72&quot; fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;252&quot;  y=&quot;0&quot;  fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;252&quot;  y=&quot;12&quot;  fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;252&quot;  y=&quot;24&quot;  fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;252&quot;  y=&quot;36&quot; fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;252&quot;  y=&quot;48&quot; fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;252&quot;  y=&quot;60&quot; fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;252&quot;  y=&quot;72&quot; fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;264&quot;  y=&quot;0&quot;  fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;264&quot;  y=&quot;12&quot;  fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;264&quot;  y=&quot;24&quot;  fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;264&quot;  y=&quot;36&quot; fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;264&quot;  y=&quot;48&quot; fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;264&quot;  y=&quot;60&quot; fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;264&quot;  y=&quot;72&quot; fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;276&quot;  y=&quot;0&quot;  fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;276&quot;  y=&quot;12&quot;  fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;276&quot;  y=&quot;24&quot;  fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;276&quot;  y=&quot;36&quot; fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;276&quot;  y=&quot;48&quot; fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;276&quot;  y=&quot;60&quot; fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;276&quot;  y=&quot;72&quot; fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;288&quot;  y=&quot;0&quot;  fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;288&quot;  y=&quot;12&quot;  fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;288&quot;  y=&quot;24&quot;  fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;288&quot;  y=&quot;36&quot; fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;288&quot;  y=&quot;48&quot; fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;288&quot;  y=&quot;60&quot; fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;288&quot;  y=&quot;72&quot; fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;300&quot; y=&quot;0&quot;  fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;300&quot; y=&quot;12&quot;  fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;300&quot; y=&quot;24&quot;  fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;300&quot; y=&quot;36&quot; fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;300&quot; y=&quot;48&quot; fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;300&quot; y=&quot;60&quot; fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;300&quot; y=&quot;72&quot; fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;312&quot; y=&quot;0&quot;  fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;312&quot; y=&quot;12&quot;  fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;312&quot; y=&quot;24&quot;  fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;312&quot; y=&quot;36&quot; fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;312&quot; y=&quot;48&quot; fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;312&quot; y=&quot;60&quot; fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;312&quot; y=&quot;72&quot; fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;324&quot; y=&quot;0&quot;  fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;324&quot; y=&quot;12&quot;  fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;324&quot; y=&quot;24&quot;  fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;324&quot; y=&quot;36&quot; fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;324&quot; y=&quot;48&quot; fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;324&quot; y=&quot;60&quot; fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;324&quot; y=&quot;72&quot; fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;336&quot; y=&quot;0&quot;  fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;336&quot; y=&quot;12&quot;  fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;336&quot; y=&quot;24&quot;  fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;336&quot; y=&quot;36&quot; fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;336&quot; y=&quot;48&quot; fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;336&quot; y=&quot;60&quot; fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;336&quot; y=&quot;72&quot; fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;348&quot; y=&quot;0&quot;  fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;348&quot; y=&quot;12&quot;  fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;348&quot; y=&quot;24&quot;  fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;348&quot; y=&quot;36&quot; fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;348&quot; y=&quot;48&quot; fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;348&quot; y=&quot;60&quot; fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;348&quot; y=&quot;72&quot; fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;360&quot; y=&quot;0&quot;  fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;360&quot; y=&quot;12&quot;  fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;360&quot; y=&quot;24&quot;  fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;360&quot; y=&quot;36&quot; fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;360&quot; y=&quot;48&quot; fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;360&quot; y=&quot;60&quot; fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;360&quot; y=&quot;72&quot; fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;372&quot; y=&quot;0&quot;  fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;372&quot; y=&quot;12&quot;  fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;372&quot; y=&quot;24&quot;  fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;372&quot; y=&quot;36&quot; fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;372&quot; y=&quot;48&quot; fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;372&quot; y=&quot;60&quot; fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;372&quot; y=&quot;72&quot; fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;384&quot; y=&quot;0&quot;  fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;384&quot; y=&quot;12&quot;  fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;384&quot; y=&quot;24&quot;  fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;384&quot; y=&quot;36&quot; fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;384&quot; y=&quot;48&quot; fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;384&quot; y=&quot;60&quot; fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;384&quot; y=&quot;72&quot; fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;396&quot; y=&quot;0&quot;  fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;396&quot; y=&quot;12&quot;  fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;396&quot; y=&quot;24&quot;  fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;396&quot; y=&quot;36&quot; fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;396&quot; y=&quot;48&quot; fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;396&quot; y=&quot;60&quot; fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;396&quot; y=&quot;72&quot; fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;408&quot; y=&quot;0&quot;  fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;408&quot; y=&quot;12&quot;  fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;408&quot; y=&quot;24&quot;  fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;408&quot; y=&quot;36&quot; fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;408&quot; y=&quot;48&quot; fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;408&quot; y=&quot;60&quot; fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;408&quot; y=&quot;72&quot; fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;420&quot; y=&quot;0&quot;  fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;420&quot; y=&quot;12&quot;  fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;420&quot; y=&quot;24&quot;  fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;420&quot; y=&quot;36&quot; fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;420&quot; y=&quot;48&quot; fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;420&quot; y=&quot;60&quot; fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;420&quot; y=&quot;72&quot; fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;432&quot; y=&quot;0&quot;  fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;432&quot; y=&quot;12&quot;  fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;432&quot; y=&quot;24&quot;  fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;432&quot; y=&quot;36&quot; fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;432&quot; y=&quot;48&quot; fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;432&quot; y=&quot;60&quot; fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;432&quot; y=&quot;72&quot; fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;444&quot; y=&quot;0&quot;  fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;444&quot; y=&quot;12&quot;  fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;444&quot; y=&quot;24&quot;  fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;444&quot; y=&quot;36&quot; fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;444&quot; y=&quot;48&quot; fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;444&quot; y=&quot;60&quot; fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;444&quot; y=&quot;72&quot; fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;456&quot; y=&quot;0&quot;  fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;456&quot; y=&quot;12&quot;  fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;456&quot; y=&quot;24&quot;  fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;456&quot; y=&quot;36&quot; fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;456&quot; y=&quot;48&quot; fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;456&quot; y=&quot;60&quot; fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;456&quot; y=&quot;72&quot; fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;468&quot; y=&quot;0&quot;  fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;468&quot; y=&quot;12&quot;  fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;468&quot; y=&quot;24&quot;  fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;468&quot; y=&quot;36&quot; fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;468&quot; y=&quot;48&quot; fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;468&quot; y=&quot;60&quot; fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;468&quot; y=&quot;72&quot; fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;480&quot; y=&quot;0&quot;  fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;480&quot; y=&quot;12&quot;  fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;480&quot; y=&quot;24&quot;  fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;480&quot; y=&quot;36&quot; fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;480&quot; y=&quot;48&quot; fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;480&quot; y=&quot;60&quot; fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;480&quot; y=&quot;72&quot; fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;492&quot; y=&quot;0&quot;  fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;492&quot; y=&quot;12&quot;  fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;492&quot; y=&quot;24&quot;  fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;492&quot; y=&quot;36&quot; fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;492&quot; y=&quot;48&quot; fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;492&quot; y=&quot;60&quot; fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;492&quot; y=&quot;72&quot; fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;504&quot; y=&quot;0&quot;  fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;504&quot; y=&quot;12&quot;  fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;504&quot; y=&quot;24&quot;  fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;504&quot; y=&quot;36&quot; fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;504&quot; y=&quot;48&quot; fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;504&quot; y=&quot;60&quot; fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;504&quot; y=&quot;72&quot; fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;516&quot; y=&quot;0&quot;  fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;516&quot; y=&quot;12&quot;  fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;516&quot; y=&quot;24&quot;  fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;516&quot; y=&quot;36&quot; fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;516&quot; y=&quot;48&quot; fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;516&quot; y=&quot;60&quot; fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;516&quot; y=&quot;72&quot; fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;528&quot; y=&quot;0&quot;  fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;528&quot; y=&quot;12&quot;  fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;528&quot; y=&quot;24&quot;  fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;528&quot; y=&quot;36&quot; fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;528&quot; y=&quot;48&quot; fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;528&quot; y=&quot;60&quot; fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;528&quot; y=&quot;72&quot; fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;540&quot; y=&quot;0&quot;  fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;540&quot; y=&quot;12&quot;  fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;540&quot; y=&quot;24&quot;  fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;540&quot; y=&quot;36&quot; fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;540&quot; y=&quot;48&quot; fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;540&quot; y=&quot;60&quot; fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;540&quot; y=&quot;72&quot; fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;552&quot; y=&quot;0&quot;  fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;552&quot; y=&quot;12&quot;  fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;552&quot; y=&quot;24&quot;  fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;552&quot; y=&quot;36&quot; fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;552&quot; y=&quot;48&quot; fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;552&quot; y=&quot;60&quot; fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;552&quot; y=&quot;72&quot; fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;564&quot; y=&quot;0&quot;  fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;564&quot; y=&quot;12&quot;  fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;564&quot; y=&quot;24&quot;  fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;564&quot; y=&quot;36&quot; fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;564&quot; y=&quot;48&quot; fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;564&quot; y=&quot;60&quot; fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;564&quot; y=&quot;72&quot; fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;576&quot; y=&quot;0&quot;  fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;576&quot; y=&quot;12&quot;  fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;576&quot; y=&quot;24&quot;  fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;576&quot; y=&quot;36&quot; fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;576&quot; y=&quot;48&quot; fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;576&quot; y=&quot;60&quot; fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;576&quot; y=&quot;72&quot; fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;588&quot; y=&quot;0&quot;  fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;588&quot; y=&quot;12&quot;  fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;588&quot; y=&quot;24&quot;  fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;588&quot; y=&quot;36&quot; fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;588&quot; y=&quot;48&quot; fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;588&quot; y=&quot;60&quot; fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;588&quot; y=&quot;72&quot; fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;600&quot; y=&quot;0&quot;  fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;600&quot; y=&quot;12&quot;  fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;600&quot; y=&quot;24&quot;  fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;600&quot; y=&quot;36&quot; fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;600&quot; y=&quot;48&quot; fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;600&quot; y=&quot;60&quot; fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;600&quot; y=&quot;72&quot; fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;612&quot; y=&quot;0&quot;  fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;612&quot; y=&quot;12&quot;  fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;612&quot; y=&quot;24&quot;  fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;612&quot; y=&quot;36&quot; fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;612&quot; y=&quot;48&quot; fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;612&quot; y=&quot;60&quot; fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;612&quot; y=&quot;72&quot; fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;624&quot; y=&quot;0&quot;  fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;624&quot; y=&quot;12&quot;  fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;624&quot; y=&quot;24&quot;  fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;624&quot; y=&quot;36&quot; fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;624&quot; y=&quot;48&quot; fill=&quot;#aaa&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;624&quot; y=&quot;60&quot; fill=&quot;#ccc&quot; &#x2F;&gt;
&lt;rect id=&quot;graphRect00&quot; width=&quot;9&quot; height=&quot;9&quot; x=&quot;624&quot; y=&quot;72&quot; fill=&quot;#ccc&quot; &#x2F;&gt;
&lt;&#x2F;g&gt;
&lt;g id=&quot;graphGroupDivLines&quot; stroke=&quot;#666&quot; stroke-width=&quot;1&quot;&gt;
&lt;path id=&quot;graphPathDivJanFeb&quot; d=&quot;M58.5 0 V81&quot; &#x2F;&gt;
&lt;path id=&quot;graphPathDivFebMar&quot; d=&quot;M106.5 0 V81&quot; &#x2F;&gt;
&lt;path id=&quot;graphPathDivMarApr&quot; d=&quot;M166.5 0 V34.5 H154.5 V81&quot; &#x2F;&gt;
&lt;path id=&quot;graphPathDivAprMay&quot; d=&quot;M214.5 0 V58.5 H202.5 V81&quot; &#x2F;&gt;
&lt;path id=&quot;graphPathDivMayJun&quot; d=&quot;M274.5 0 V10.5 H262.5 V81&quot; &#x2F;&gt;
&lt;path id=&quot;graphPathDivJunJul&quot; d=&quot;M322.5 0 V34.5 H310.5 V81&quot; &#x2F;&gt;
&lt;path id=&quot;graphPathDivJulAug&quot; d=&quot;M370.5 0 V70.5 H358.5 V81&quot; &#x2F;&gt;
&lt;path id=&quot;graphPathDivAugSep&quot; d=&quot;M430.5 0 V22.5 H418.5 V81&quot; &#x2F;&gt;
&lt;path id=&quot;graphPathDivSepOct&quot; d=&quot;M478.5 0 V46.5 H466.5 V81&quot; &#x2F;&gt;
&lt;path id=&quot;graphPathDivOctNov&quot; d=&quot;M538.5 0 V81&quot; &#x2F;&gt;
&lt;path id=&quot;graphPathDivNovDec&quot; d=&quot;M598.5 0 V22.5 H586.5 V81&quot; &#x2F;&gt;
&lt;&#x2F;g&gt;
&lt;&#x2F;svg&gt;

{{ loadData(path=&quot;&#x2F;media&#x2F;lab&#x2F;spotify-wrapped&#x2F;graph.svg&quot;) }}
{{ loadData(path=&quot;&#x2F;media&#x2F;lab&#x2F;spotify-wrapped&#x2F;graph.svg&quot;) }}
{{ loadData(path=&quot;&#x2F;media&#x2F;lab&#x2F;spotify-wrapped&#x2F;graph.svg&quot;) }}
{{ loadData(path=&quot;&#x2F;media&#x2F;lab&#x2F;spotify-wrapped&#x2F;graph.svg&quot;) }}
{{ loadData(path=&quot;&#x2F;media&#x2F;lab&#x2F;spotify-wrapped&#x2F;graph.svg&quot;) }}

&lt;svg height=&quot;1rem&quot; viewBox=&quot;0 0 10 1&quot; fill=&quot;none&quot;&gt;
&lt;rect width=&quot;1&quot; height=&quot;1&quot; x=&quot;0&quot; y=&quot;0&quot; fill=&quot;#E5E5EF&quot; &#x2F;&gt;
&lt;rect width=&quot;1&quot; height=&quot;1&quot; x=&quot;1&quot; y=&quot;0&quot; fill=&quot;#DAC8DB&quot; &#x2F;&gt;
&lt;rect width=&quot;1&quot; height=&quot;1&quot; x=&quot;2&quot; y=&quot;0&quot; fill=&quot;#D3ACC8&quot; &#x2F;&gt;
&lt;rect width=&quot;1&quot; height=&quot;1&quot; x=&quot;3&quot; y=&quot;0&quot; fill=&quot;#D394B7&quot; &#x2F;&gt;
&lt;rect width=&quot;1&quot; height=&quot;1&quot; x=&quot;4&quot; y=&quot;0&quot; fill=&quot;#D07BA4&quot; &#x2F;&gt;
&lt;rect width=&quot;1&quot; height=&quot;1&quot; x=&quot;5&quot; y=&quot;0&quot; fill=&quot;#B16794&quot; &#x2F;&gt;
&lt;rect width=&quot;1&quot; height=&quot;1&quot; x=&quot;6&quot; y=&quot;0&quot; fill=&quot;#91638F&quot; &#x2F;&gt;
&lt;rect width=&quot;1&quot; height=&quot;1&quot; x=&quot;7&quot; y=&quot;0&quot; fill=&quot;#6E5480&quot; &#x2F;&gt;
&lt;rect width=&quot;1&quot; height=&quot;1&quot; x=&quot;8&quot; y=&quot;0&quot; fill=&quot;#4B3B66&quot; &#x2F;&gt;
&lt;rect width=&quot;1&quot; height=&quot;1&quot; x=&quot;9&quot; y=&quot;0&quot; fill=&quot;#2E214D&quot; &#x2F;&gt;
&lt;&#x2F;svg&gt;
--&gt;

&lt;!--
* Selection menu for:
    * Top Artists. Use similar color for similar artists — pehaps sorted by artist genre.
    On hover: Top 5 artists of day, based on:
        * Time listened
        * Number of times played
    Submenu for viewing certain top artist — time per day — same colors — below main selection menu.
    * Top Songs. Use similar color for similar songs — pehaps sorted by artist genre.
    On hover: Top 5 songs based on:
        * Time listened
        * Number of times played
    Submenu for viewing certain top song — time per day — same colors — below main selection menu.
    * Genre — Colorscale legend at the bottom, above the selection menu.
    On hover: Top 5 genres of day based on:
        * Genre breakdown for the day (proportional line chart — like a pie chart but using a line). Legend shown below
    * Mood — Colorscale legend at the bottom, above the selection menu. Blue for sad, orange for upbeat.
    On hover: Top 5 genres of day based on:
        * Moodiness score of top 5 songs for the day (based on time listened)
        * Number of sad songs listened on that day
        * Number of upbeat songs listened on that day
    * Times listened — Colorscale legend at the bottom, above the selection menu.
    On hover:
        * 24 dots arranged as (8-12 morning, 12-16 daytime, 16-20 evening, 20-0 night, 0-4 late night, 4-8 ultra late night) with same colors, signifying hours.
* Time per hour — Slider for selecting hour+an overall for the day option, above the selection menu. No hover if hour is selected.
* On hover show date regardless of menu option. Maybe use diving lines on date graph to differentiate months.
* https:&#x2F;&#x2F;observablehq.com&#x2F;@observablehq&#x2F;plot-calendar
* https:&#x2F;&#x2F;observablehq.com&#x2F;framework&#x2F;markdown#cards
--&gt;
&lt;svg id=&quot;bitarraySVG&quot; viewBox=&quot;0 0 200 75&quot; fill=&quot;none&quot; width=&quot;1200px&quot; height=&quot;450px&quot;&gt;
&lt;desc&gt;Bit array.&lt;&#x2F;desc&gt;
&lt;rect id=&quot;bitarrayBG&quot; fill=&quot;#aaa&quot; x=&quot;0&quot; y=&quot;0&quot; width=&quot;200&quot; height=&quot;150&quot; &#x2F;&gt;
&lt;&#x2F;svg&gt;

&lt;p&gt;Personally, I think the &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;observablehq.com&#x2F;@d3&#x2F;calendar&#x2F;2&quot;&gt;calendar plot&lt;&#x2F;a&gt; is more data dense and gives deeper insights than listing top artists and top songs of the year. But there’s also disadvantages  — the most obvious being that it will not scale well at all for smaller screens.&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>Quantifying Colour</title>
        <published>2024-11-13T00:00:00+00:00</published>
        <updated>2024-11-13T00:00:00+00:00</updated>
        <author><name>Anchit Roy</name></author>
        <link rel="alternate" type="text/html" href="https://ekunazanu.dev/lab/quantifying-colour/"/>
        <id>https://ekunazanu.dev/lab/quantifying-colour/</id>
        <summary type="html">A few things about colours and colour formats.</summary>
        <content type="html" xml:base="https://ekunazanu.dev/lab/quantifying-colour/">&lt;p&gt;There’s a lot of different ways to describe colours. But to pinpoint an exact colour, there needs to be a standard way to represent it. Even some surface level research about the topic reveals that there’s extensive science and math behind this seemingly simple task.&lt;&#x2F;p&gt;
&lt;p&gt;Before quantifying colours, it is important to first define what colours even are. &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Color&quot;&gt;Wikipedia&lt;&#x2F;a&gt; defines it as “The visual perception based on the electromagnetic spectrum”. So a colour depends on the perception of the viewer, as well as the electromagnetic spectrum — or in plain language, light.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;Spectral_Power_Distribution&quot;&gt;Spectral Power Distribution&lt;&#x2F;h2&gt;
&lt;p&gt;Light is made up of &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Photon&quot;&gt;photons&lt;&#x2F;a&gt;. These can thought of as abstract particles carrying specific amounts of energy — determined by their &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Photon_energy#Physics&quot;&gt;wavelength or freuqency&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;

&lt;svg id=&quot;bitarraySVG&quot; viewBox=&quot;0 0 200 75&quot; fill=&quot;none&quot; width=&quot;1200px&quot; height=&quot;450px&quot;&gt;
&lt;desc&gt;Bit array.&lt;&#x2F;desc&gt;
&lt;rect id=&quot;bitarrayBG&quot; fill=&quot;#aaa&quot; x=&quot;0&quot; y=&quot;0&quot; width=&quot;200&quot; height=&quot;150&quot; &#x2F;&gt;
&lt;&#x2F;svg&gt;



&lt;details  &gt;
&lt;summary&gt;Photon wave-particle duality&lt;&#x2F;summary&gt;
The above is an interpretation of a photon, and is not necessarily accurate. The exact shape of photons is difficult to describe since photons exhibit &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Wave%E2%80%93particle_duality#Wave-particle_duality_of_light&quot;&gt;both particle and wave-like behaviour&lt;&#x2F;a&gt;. Trying to visualize photons as both as a particle and a wave can get very tricky very quickly.
&lt;&#x2F;details&gt;
&lt;p&gt;The different wavelengths of photons together form the &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Electromagnetic_spectrum&quot;&gt;electromagnetic spectrum&lt;&#x2F;a&gt;. It is simply the full range photons of different energies, ordered by wavelength.&lt;&#x2F;p&gt;

&lt;svg id=&quot;bitarraySVG&quot; viewBox=&quot;0 0 200 75&quot; fill=&quot;none&quot; width=&quot;1200px&quot; height=&quot;450px&quot;&gt;
&lt;desc&gt;Bit array.&lt;&#x2F;desc&gt;
&lt;rect id=&quot;bitarrayBG&quot; fill=&quot;#aaa&quot; x=&quot;0&quot; y=&quot;0&quot; width=&quot;200&quot; height=&quot;150&quot; &#x2F;&gt;
&lt;&#x2F;svg&gt;


&lt;!-- ![image of packets of aninated waves of different wavelengths — ultraviolet, visible, xray, infrared, etc with a sepectrum legend below](animated) --&gt;

&lt;p&gt;Since photons carry energy, any body that radiate photons also radiate energy. The rate of energy transferred via photons can be measured as &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Power_(physics)&quot;&gt;power&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;

&lt;svg id=&quot;bitarraySVG&quot; viewBox=&quot;0 0 200 75&quot; fill=&quot;none&quot; width=&quot;1200px&quot; height=&quot;450px&quot;&gt;
&lt;desc&gt;Bit array.&lt;&#x2F;desc&gt;
&lt;rect id=&quot;bitarrayBG&quot; fill=&quot;#aaa&quot; x=&quot;0&quot; y=&quot;0&quot; width=&quot;200&quot; height=&quot;150&quot; &#x2F;&gt;
&lt;&#x2F;svg&gt;


&lt;!-- ![moving photons from left to right onto an power sensor; rate of number of photons slider; column-ish power indicator below — make it somewhat similar (but reduced&#x2F;minimal) version of the following spd graph below](interactive) --&gt;

&lt;p&gt;If the power per unit area, or the &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Intensity_(physics)&quot;&gt;intensity&lt;&#x2F;a&gt; is plotted per wavelength for a body radiating photons of different wavelengths, then the resulting curve yields its &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Spectral_power_distribution&quot;&gt;spectral power distribution&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;

&lt;svg id=&quot;bitarraySVG&quot; viewBox=&quot;0 0 200 75&quot; fill=&quot;none&quot; width=&quot;1200px&quot; height=&quot;450px&quot;&gt;
&lt;desc&gt;Bit array.&lt;&#x2F;desc&gt;
&lt;rect id=&quot;bitarrayBG&quot; fill=&quot;#aaa&quot; x=&quot;0&quot; y=&quot;0&quot; width=&quot;200&quot; height=&quot;150&quot; &#x2F;&gt;
&lt;&#x2F;svg&gt;


&lt;!-- ![moving photons from left to right onto an smaller fixed size power sensor; rate of number of photons slider for three&#x2F;four&#x2F;five&#x2F;six wavelengths; spd graph below](interactive) --&gt;

&lt;p&gt;The spectral power distribution is fundamenetal to determining the ‘colour’ of an object.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;Photoreceptor_Cells&quot;&gt;Photoreceptor Cells&lt;&#x2F;h2&gt;
&lt;p&gt;The sun too radiates a large amount of photons, and the spectral power distribution of the sun appears similar to this:&lt;&#x2F;p&gt;

&lt;svg id=&quot;bitarraySVG&quot; viewBox=&quot;0 0 200 75&quot; fill=&quot;none&quot; width=&quot;1200px&quot; height=&quot;450px&quot;&gt;
&lt;desc&gt;Bit array.&lt;&#x2F;desc&gt;
&lt;rect id=&quot;bitarrayBG&quot; fill=&quot;#aaa&quot; x=&quot;0&quot; y=&quot;0&quot; width=&quot;200&quot; height=&quot;150&quot; &#x2F;&gt;
&lt;&#x2F;svg&gt;


&lt;!-- static --&gt;

&lt;p&gt;The intensity peaks near 500nm. Human eyes naturally evolved to become sensitive to photons with these wavelengths —  different kinds of &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Photoreceptor_cell&quot;&gt;photoreceptor cells&lt;&#x2F;a&gt; have evolved to become sensitive to photons of wavelengths from 400nm to around 700nm. Depending on the energy carried by the photons (their wavelength and intensity), they can ‘excite’ the photoreceptor cells to produce a specific response.&lt;&#x2F;p&gt;
&lt;p&gt;The human eye has two kinds of photoreceptor cells — &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Rod_cell&quot;&gt;rod cells&lt;&#x2F;a&gt; and three types of &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Cone_cell&quot;&gt;cone cells&lt;&#x2F;a&gt;. The different types of photoreceptor cells are sensitive to different wavelengths of light by differing amounts — some cone cells (S-cones) will not produce a significant response to lights with longer wavelengths but other types (L-cones) will. The &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Spectral_sensitivity&quot;&gt;sensitivity&lt;&#x2F;a&gt; curves of the different photoreceptor cells are shown below:&lt;&#x2F;p&gt;

&lt;svg id=&quot;bitarraySVG&quot; viewBox=&quot;0 0 200 75&quot; fill=&quot;none&quot; width=&quot;1200px&quot; height=&quot;450px&quot;&gt;
&lt;desc&gt;Bit array.&lt;&#x2F;desc&gt;
&lt;rect id=&quot;bitarrayBG&quot; fill=&quot;#aaa&quot; x=&quot;0&quot; y=&quot;0&quot; width=&quot;200&quot; height=&quot;150&quot; &#x2F;&gt;
&lt;&#x2F;svg&gt;


&lt;!-- ![absolute response curves above; normalized response curves below;](static) --&gt;

&lt;details  open  &gt;
&lt;summary&gt;Normalized curves&lt;&#x2F;summary&gt;
The sensitivity of S-cones is significantly lower compared to the other cones. Similarly, rods are relatively more sensitive to light than cones. However, the sensitivity curves are normalized, such that the curves have equal areas under the curves — to make subsequent calculations simpler.
&lt;&#x2F;details&gt;
&lt;p&gt;The response of the photoreceptor cells to lights of different wavelengths is dependent on the spectral power distribution of the incident light, and the sensitivty of the rods and cones. The responses generated by the different types of photoreceptor cells for &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Monochromatic_radiation&quot;&gt;monochromatic light&lt;&#x2F;a&gt; (light with near singular wavelength) is shown below:&lt;&#x2F;p&gt;

&lt;svg id=&quot;bitarraySVG&quot; viewBox=&quot;0 0 200 75&quot; fill=&quot;none&quot; width=&quot;1200px&quot; height=&quot;450px&quot;&gt;
&lt;desc&gt;Bit array.&lt;&#x2F;desc&gt;
&lt;rect id=&quot;bitarrayBG&quot; fill=&quot;#aaa&quot; x=&quot;0&quot; y=&quot;0&quot; width=&quot;200&quot; height=&quot;150&quot; &#x2F;&gt;
&lt;&#x2F;svg&gt;


&lt;!-- ![spd on top — single spike on spd at wavelength dependent on sliders on top; sensitivity curve graph of photoreceptor cells below; response curve of above two graphs below — shade the areas below with colour of photoreceptor type (rod=black,s=blue,m=greenish,l=yellowish-to-red); slider for wavelength &amp; number of photons at bottom below all graphs; show amount of response of each type of receptors (rods and cones) as a sort of (progress&#x2F;without sliding knob) bars on the right of the sliders for wavelength and intensity of photons; eg: https:&#x2F;&#x2F;jamie-wong.com&#x2F;images&#x2F;color&#x2F;ConeExcitation1.png — combine all the three coloumns to one graph; keep rows separate; highlight response of cones progress bars and cones curves — by greying&#x2F;reducing contrast of rods response progress bars, rods sensitivity curves, and rods response curves;](interactive) --&gt;

&lt;details  open  &gt;
&lt;summary&gt;Photoreceptor cell responses&lt;&#x2F;summary&gt;
The response curve of the types of photoreceptor cells is the &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Pointwise#Examples&quot;&gt;point-wise product&lt;&#x2F;a&gt; of the spectral power distribution curve and the photoreceptor sensitivity curves. The overall response from each type of photoreceptor cell is the total area under their corresponding response curves.
&lt;&#x2F;details&gt;
&lt;p&gt;Light with differing intensity and wavelengths produce different and unique responses in the three types of cones. The &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Color_vision#Theories&quot;&gt;different responses are perceived by the brain&lt;&#x2F;a&gt; as a colour.&lt;&#x2F;p&gt;

&lt;svg id=&quot;bitarraySVG&quot; viewBox=&quot;0 0 200 75&quot; fill=&quot;none&quot; width=&quot;1200px&quot; height=&quot;450px&quot;&gt;
&lt;desc&gt;Bit array.&lt;&#x2F;desc&gt;
&lt;rect id=&quot;bitarrayBG&quot; fill=&quot;#aaa&quot; x=&quot;0&quot; y=&quot;0&quot; width=&quot;200&quot; height=&quot;150&quot; &#x2F;&gt;
&lt;&#x2F;svg&gt;


&lt;!-- ![spd on top — single spike on spd at wavelength dependent on sliders; sensitivity curve graph of photoreceptor cells below; response curve of above two graphs below — shade the areas below with colour of photoreceptor type (rod=black,s=blue,m=greenish,l=yellowish-to-red); slider for wavelength &amp; number of photons at bottom below all graphs; show amount of response of each type of receptors (rods and cones) as a sort of (progress&#x2F;without sliding knob) bars on the right of the sliders for wavelength and intensity of photons; eg: https:&#x2F;&#x2F;jamie-wong.com&#x2F;images&#x2F;color&#x2F;ConeExcitation1.png — combine all the three coloumns to one graph; keep rows separate; small colour box below or next to right to response (progress-like) bar, showing colors and colour names below the box at specific cone reponses (specific wavelengths and intensity); highlight response of cones progress bars and cones curves — by greying&#x2F;reducing contrast of rods response progress bars, rods sensitivity curves, and rods response curves;](interactive) --&gt;

&lt;details  open  &gt;
&lt;summary&gt;Colour Classifications&lt;&#x2F;summary&gt;
There can be more or fewer colour names for these wavelengths depending on the &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Spectral_color#Spectral_color_terms&quot;&gt;classification&lt;&#x2F;a&gt;.
&lt;&#x2F;details&gt;
&lt;p&gt;Rods do not have a big effect on colour perception. In &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Photopic_vision&quot;&gt;well-lit conditions&lt;&#x2F;a&gt;, the cones might produce different responses based on the wavelength of light. But in such conditions, the rod cells produce a saturated response since rods are more sensitive to light than cones. As the response of rods in bright environments is indifferent to wavelengths, it cannot differentiate between distinct wavelengths, and threfore does not have a major impact on colour perception — in bright conditions.&lt;&#x2F;p&gt;

&lt;svg id=&quot;bitarraySVG&quot; viewBox=&quot;0 0 200 75&quot; fill=&quot;none&quot; width=&quot;1200px&quot; height=&quot;450px&quot;&gt;
&lt;desc&gt;Bit array.&lt;&#x2F;desc&gt;
&lt;rect id=&quot;bitarrayBG&quot; fill=&quot;#aaa&quot; x=&quot;0&quot; y=&quot;0&quot; width=&quot;200&quot; height=&quot;150&quot; &#x2F;&gt;
&lt;&#x2F;svg&gt;


&lt;!-- ![spd on top — single spike on spd at wavelength dependent on sliders on top; sensitivity curve graph of photoreceptor cells below; response curve of above two graphs below — shade the areas below with colour of photoreceptor type (rod=black,s=blue,m=greenish,l=yellowish-to-red); slider for wavelength &amp; number of photons at bottom below all graphs; show amount of response of each type of receptors (rods and cones) as a sort of (progress&#x2F;without sliding knob) bars on the right of the sliders for wavelength and intensity of photons; eg: https:&#x2F;&#x2F;jamie-wong.com&#x2F;images&#x2F;color&#x2F;ConeExcitation1.png — combine all the three coloumns to one graph; keep rows separate; highlight response of rods progress bars and rod curves — by greying&#x2F;reducing contrast of cone response progress bars, cone sensitivity curves, and cone response curves; restrict intensity slider to NON-LOW intensity values — and maybe grey out the first 10% of the slider;](interactive) --&gt;

&lt;details  open  &gt;
&lt;summary&gt;Saturated response&lt;&#x2F;summary&gt;
The response from rods remain saturated, and no meaningful information about the wavelength is obtained from the response. Cones on the other hand, respond differently to different wavelengths, and the different responses can be interpreted by the brain as different wavelengths.
&lt;&#x2F;details&gt;
&lt;p&gt;In &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Scotopic_vision&quot;&gt;darker environments&lt;&#x2F;a&gt;, rods produce a response when cones may not. But since there is only one type of rod cells, all rods have almost identical sensitivity curves. So, it is not possible to distinguish between different wavelengths and intensities of light — two light sources with different wavelengths and intensities can produce the same response in rods. There is no way to differentiate between different wavelengths and intensity of light and the brain evolved to perceive the response of the rods as a singular luminance value. So ‘colours’ appear different shades of grey in the dark.&lt;&#x2F;p&gt;

&lt;svg id=&quot;bitarraySVG&quot; viewBox=&quot;0 0 200 75&quot; fill=&quot;none&quot; width=&quot;1200px&quot; height=&quot;450px&quot;&gt;
&lt;desc&gt;Bit array.&lt;&#x2F;desc&gt;
&lt;rect id=&quot;bitarrayBG&quot; fill=&quot;#aaa&quot; x=&quot;0&quot; y=&quot;0&quot; width=&quot;200&quot; height=&quot;150&quot; &#x2F;&gt;
&lt;&#x2F;svg&gt;


&lt;!-- ![two different spds on top, side-by-side — single spike on spds at wavelength dependent on sliders; two IDENTICAL sensitivity curve graph of photoreceptor cells below; two different response curve of above two (four in total) graphs below — shade the areas below with colour of photoreceptor type (rod=black,s=blue,m=greenish,l=yellowish-to-red); sliders for wavelength &amp; number of photons at bottom below, for each of two columns of graphs on left and right; show amount of response of each type of receptors (rods and cones) as a sort of (progress&#x2F;without sliding knob) bars on the right of the sliders for wavelength and intensity of photons — two for each of the two columns of response curves; eg: https:&#x2F;&#x2F;jamie-wong.com&#x2F;images&#x2F;color&#x2F;ConeExcitation1.png; keep rows separate; highlight response of rods progress bars and rod curves — by greying&#x2F;reducing contrast of cone response progress bars, cone sensitivity curves, and cone response curves; restrict intensity slider to LOW intensity values (gry out 90% of the right of the original sized slider) — and maybe extend the slider to the left a bit and use different scaling, mentioning the altered scale below](interactive) --&gt;

&lt;details  open  &gt;
&lt;summary&gt;Wavelength ambiguity&lt;&#x2F;summary&gt;
Two light sources with &lt;a href=&quot;switch#&quot;&gt;different wavelengths&lt;&#x2F;a&gt; produce a similar response in rods, and are thus perceived as similar by the brain. This is only if their intensities are not enough to adequately excite the cone cells.
&lt;&#x2F;details&gt;
&lt;p&gt;Since rods cannot differentiate between different wavelengths of light, they do not play a role in colour perception — regardless of whether it is dark or bright.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;Colour_Blindness&quot;&gt;Colour Blindness&lt;&#x2F;h3&gt;
&lt;p&gt;Sometimes cone cells too may not be able to differentiate between different wavelengths of light. This can happen due to missing cones, or cones with overlapping sensitivity curves. Without the third cone, differentiating between certain wavlengths of light is not possible — which manifests as &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Color_blindness&quot;&gt;colour blindess&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;

&lt;svg id=&quot;bitarraySVG&quot; viewBox=&quot;0 0 200 75&quot; fill=&quot;none&quot; width=&quot;1200px&quot; height=&quot;450px&quot;&gt;
&lt;desc&gt;Bit array.&lt;&#x2F;desc&gt;
&lt;rect id=&quot;bitarrayBG&quot; fill=&quot;#aaa&quot; x=&quot;0&quot; y=&quot;0&quot; width=&quot;200&quot; height=&quot;150&quot; &#x2F;&gt;
&lt;&#x2F;svg&gt;


&lt;!-- ![two different spds on top, side-by-side — single spike on spds at wavelength dependent on sliders; two DIFFERENT sensitivity curve graph of photoreceptor cells below — one normal on left, one with overlapping L-cones and M-cones sensitivity curves on right; two different response curve of above two (four in total) graphs below — shade the areas below with colour of photoreceptor type (rod=black,s=blue,m=greenish,l=yellowish-to-red); sliders for wavelength &amp; number of photons at bottom below, for each of two columns of graphs on left and right; show amount of response of each type of receptors (rods and cones) as a sort of (progress&#x2F;without sliding knob) bars on the right of the sliders for wavelength and intensity of photons — two for each of the two columns of response curves; eg: https:&#x2F;&#x2F;jamie-wong.com&#x2F;images&#x2F;color&#x2F;ConeExcitation1.png; keep rows separate; highlight response of cones progress bars and cones curves — by greying&#x2F;reducing contrast of rods response progress bars, rods sensitivity curves, and rods response curves; REMOVE SENSITIVITY CURVES, RESPONSE CURVES, RESPONSE PROGRESS BARS FOR RODS FROM THIS POINT ON (unless explicitly mentioned);](interactive) --&gt;

&lt;details  open  &gt;
&lt;summary&gt;Wavelength ambiguity&lt;&#x2F;summary&gt;
Wavelengths &lt;a href=&quot;switch#&quot;&gt;XXXnm and YYYnm&lt;&#x2F;a&gt; produce a similar responses in cones, and are perceived as similar colours.
&lt;&#x2F;details&gt;
&lt;p&gt;The type of cone anomaly determines the type of colour blindness. The L-cones can shift their response curves slightly towards shorter wavelengths (&lt;a href=&quot;https:&#x2F;&#x2F;ekunazanu.dev&#x2F;lab&#x2F;quantifying-colour&#x2F;switch#&quot;&gt;protanomaly&lt;&#x2F;a&gt;), or the M-cones shift their response curves towards longer wavelengths (&lt;a href=&quot;https:&#x2F;&#x2F;ekunazanu.dev&#x2F;lab&#x2F;quantifying-colour&#x2F;switch#&quot;&gt;deuteranomaly&lt;&#x2F;a&gt;). People may also lack functional L-cones (&lt;a href=&quot;https:&#x2F;&#x2F;ekunazanu.dev&#x2F;lab&#x2F;quantifying-colour&#x2F;switch#&quot;&gt;protanopia&lt;&#x2F;a&gt;) or M-cones (&lt;a href=&quot;https:&#x2F;&#x2F;ekunazanu.dev&#x2F;lab&#x2F;quantifying-colour&#x2F;switch#&quot;&gt;deuteranopia&lt;&#x2F;a&gt;) entirely. The result is similar in all the cases — reds and greens look similar, to almost identical. In very rare cases, people may have anomalous S-cones, resulting in &lt;a href=&quot;https:&#x2F;&#x2F;ekunazanu.dev&#x2F;lab&#x2F;quantifying-colour&#x2F;switch#&quot;&gt;tritanomaly&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;ekunazanu.dev&#x2F;lab&#x2F;quantifying-colour&#x2F;switch#&quot;&gt;tritanopia&lt;&#x2F;a&gt;. In even rarer cases, people may &lt;a href=&quot;https:&#x2F;&#x2F;ekunazanu.dev&#x2F;lab&#x2F;quantifying-colour&#x2F;switch#&quot;&gt;only have S-cones&lt;&#x2F;a&gt;, or &lt;a href=&quot;https:&#x2F;&#x2F;ekunazanu.dev&#x2F;lab&#x2F;quantifying-colour&#x2F;switch#&quot;&gt;no cone cells at all&lt;&#x2F;a&gt; — resulting in &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Monochromacy#Humans&quot;&gt;total colour blindess&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;

&lt;svg id=&quot;bitarraySVG&quot; viewBox=&quot;0 0 200 75&quot; fill=&quot;none&quot; width=&quot;1200px&quot; height=&quot;450px&quot;&gt;
&lt;desc&gt;Bit array.&lt;&#x2F;desc&gt;
&lt;rect id=&quot;bitarrayBG&quot; fill=&quot;#aaa&quot; x=&quot;0&quot; y=&quot;0&quot; width=&quot;200&quot; height=&quot;150&quot; &#x2F;&gt;
&lt;&#x2F;svg&gt;


&lt;!-- ![spd above response curves; two response curve graphs of photoreceptor cells; one set sliders for wavelength &amp; number of photons, another set of sliders for wavelength &amp; number of photons; one vertical line overlaid on each of two response graphs to show wavelengths; show amount of response of each type of receptor cells as (unmovable&#x2F;grayed out) bars on the right (vertical) or below (horizontal) on both graphs; emphasis on response of cones; others are lightened out (maybe low contrast); show interesection of wavelength vertical line indicator and response curve as small (but bigger than lines) dots; emphasis on intersection cones curve (others are grayed&#x2F;low-contrast out); curve changes as intensity slider changes; menu to select protanomaly&#x2F;deutanomly&#x2F;tritanomaly&#x2F;prot&#x2F;achromatopsia&#x2F;BCM&#x2F;etc; change menu option changes response curves](interactive) --&gt;

&lt;h3 id=&quot;Non-Spectral_Colours&quot;&gt;Non-Spectral Colours&lt;&#x2F;h3&gt;
&lt;p&gt;All the examples in the above subsections were about &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Spectral_color&quot;&gt;spectral colours&lt;&#x2F;a&gt; — light with very narrow bands of wavelengths. But not all colours are spectral colours. Greys and purples are non-spectral colours that cannot be created using only monochromatic light.&lt;&#x2F;p&gt;
&lt;p&gt;The spectral power distribution of non-spectral colours is not a single spike at a specfic wavelength, unlike spectral colours:&lt;&#x2F;p&gt;

&lt;svg id=&quot;bitarraySVG&quot; viewBox=&quot;0 0 200 75&quot; fill=&quot;none&quot; width=&quot;1200px&quot; height=&quot;450px&quot;&gt;
&lt;desc&gt;Bit array.&lt;&#x2F;desc&gt;
&lt;rect id=&quot;bitarrayBG&quot; fill=&quot;#aaa&quot; x=&quot;0&quot; y=&quot;0&quot; width=&quot;200&quot; height=&quot;150&quot; &#x2F;&gt;
&lt;&#x2F;svg&gt;


&lt;!-- ![spd of green; spd of magenta; spd of pink; spd of gray](static) --&gt;

&lt;p&gt;The set of responses from the cones for non-spectral colours like magenta or grey is different from the set of responses produced by the cones for spectral colours. The brain perceives these unique set of responses from the cones as a separate colour.&lt;&#x2F;p&gt;
&lt;p&gt;Try finding a spectral colour that has an identical response as magenta. It is impossible:&lt;&#x2F;p&gt;

&lt;svg id=&quot;bitarraySVG&quot; viewBox=&quot;0 0 200 75&quot; fill=&quot;none&quot; width=&quot;1200px&quot; height=&quot;450px&quot;&gt;
&lt;desc&gt;Bit array.&lt;&#x2F;desc&gt;
&lt;rect id=&quot;bitarrayBG&quot; fill=&quot;#aaa&quot; x=&quot;0&quot; y=&quot;0&quot; width=&quot;200&quot; height=&quot;150&quot; &#x2F;&gt;
&lt;&#x2F;svg&gt;


&lt;!-- ![fixed spd of magenta above response curve graph with fixed vertical wavelength lines; changing spd — depending on wavelength and intensity slider — above response curve graph with wavelength and intensity slider; two response curve graphs of photoreceptor cells; two FIXED vertical lines overlaid on one response graph to show two wavelengths of blue and red; one set sliders for wavelength &amp; number of photons below the other response curve graph; one vertical line to show changeable wavelength in the above the slider; show amount of response of each type of receptor cells as (unmovable&#x2F;grayed out) bars on the right (vertical) or below (horizontal); emphasis on response of cones; others are lightened out (maybe low contrast); show interesection of wavelength vertical line indicator and response curve as small (but bigger than lines) dots; emphasis on intersection cones curve (others are grayed&#x2F;low-contrast out); curve changes as intensity slider changes; another set of (unmovable&#x2F;grayedout) bars BUT FIXED to show response of cones for magenta (blue and red); show response of magenta as addition of (unmovable&#x2F;grayedout bars) responses of blue wavelength and response of red wavelength (another unmovable&#x2F;grayedout) bars) — with sum as magenta response(unmovable&#x2F;grayedout bars); user tries to move movable wavelength and intensity to change output of grayedoutbars to match FIXED grayedout bars of magenta response;](interactive) --&gt;

&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;ekunazanu.dev&#x2F;lab&#x2F;quantifying-colour&#x2F;switch#&quot;&gt;Greys&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;ekunazanu.dev&#x2F;lab&#x2F;quantifying-colour&#x2F;switch#&quot;&gt;pinks&lt;&#x2F;a&gt; too, are composed of light with multiple wavelengths. In both cases, the response of the cones is again unique and different — from the responses generated by monochromatic light.&lt;&#x2F;p&gt;

&lt;svg id=&quot;bitarraySVG&quot; viewBox=&quot;0 0 200 75&quot; fill=&quot;none&quot; width=&quot;1200px&quot; height=&quot;450px&quot;&gt;
&lt;desc&gt;Bit array.&lt;&#x2F;desc&gt;
&lt;rect id=&quot;bitarrayBG&quot; fill=&quot;#aaa&quot; x=&quot;0&quot; y=&quot;0&quot; width=&quot;200&quot; height=&quot;150&quot; &#x2F;&gt;
&lt;&#x2F;svg&gt;


&lt;!-- ![spd of pink, and gray, and (make it sketchable by user — BIG MAYBE) on top; response curves below. another curve multiplication of both curves. shade area under product of curves — display that as the value of response of cones; the example image has three sets of curves for each cone — try to combine all of them in one graph for each row — aka combine the top 3 curves as one spd graph; middle 3 as previous cone response graph; bottom 3 curves as a product response graph](interactive) --&gt;

&lt;h3 id=&quot;Metamerism&quot;&gt;Metamerism&lt;&#x2F;h3&gt;
&lt;p&gt;In the above cases, various wavelengths of light together created unique responses in cones, which is different from the responses when cones are exposed to monochromatic light. However, multiple wavelengths of light together can also produce a response that is not unique, but very similar to the response of a spectral colour.&lt;&#x2F;p&gt;
&lt;p&gt;Empirical data from colour matching experiments by &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;doi.org&#x2F;10.1088&#x2F;1475-4878&#x2F;30&#x2F;4&#x2F;301&quot;&gt;William David Wright&lt;&#x2F;a&gt; and &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;doi.org&#x2F;10.1098&#x2F;rsta.1932.0005&quot;&gt;John Guild&lt;&#x2F;a&gt; mapped light consisting of three wavelengths (435nm, 546nm, and 700nm) to spectral colours — by varying the intensities of its constituent monochromatic lights such that the resultant light was perceived to be the same as a spectral colour. The findings were then summarised, and the observations resulted in the colour-matching curves.&lt;&#x2F;p&gt;

&lt;svg id=&quot;bitarraySVG&quot; viewBox=&quot;0 0 200 75&quot; fill=&quot;none&quot; width=&quot;1200px&quot; height=&quot;450px&quot;&gt;
&lt;desc&gt;Bit array.&lt;&#x2F;desc&gt;
&lt;rect id=&quot;bitarrayBG&quot; fill=&quot;#aaa&quot; x=&quot;0&quot; y=&quot;0&quot; width=&quot;200&quot; height=&quot;150&quot; &#x2F;&gt;
&lt;&#x2F;svg&gt;


&lt;!-- ![spd of single wavelength light on left above; response curve below; and product of both bottom; slider for wavelength but grayed out slider for intensity below bottom; grayed out sliders for 700nm and 546nm light may appear and disappear depending on wavelenght; the sliders have grayed out wavelenths (fixed at 700&#x2F;546nm) and grayed out (but moveable) sliders for intensity; spd of three wavelengths on right above; response curve below; and product of both bottom; grayed out sliders for wavelenghts (grayed out and stays fixed as well) and intensity (grayed out moves) of light sources; separate cone responses for both graphs below respective graphs](&#x2F;media&#x2F;lab&#x2F;quantifying-colours&#x2F;samp.png) --&gt;

&lt;details  open  &gt;
&lt;summary&gt;Negative intensity&lt;&#x2F;summary&gt;
Adding colours to one side is equivalent to sutracting colours from the other side, inferring from &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Grassmann%27s_laws_(color_science)&quot;&gt;Grassman’s laws&lt;&#x2F;a&gt;. In the colour matching experiment, adding light to the spectral colour being compared is represented as subtracting from the colour matching function curves — resulting in negative intensity.&lt;&#x2F;p&gt;
&lt;p&gt;Physically, it is impossible to create light with negative intensity, so it is impossible to reproduce certain colours using only three wavelengths of light. However, colours can still be represented &lt;em&gt;theoretically&lt;&#x2F;em&gt; using negative values.
&lt;&#x2F;details&gt;
&lt;p&gt;The three wavelengths of light together produce identical responses to spectral colours in the cones — making them appear similar. So certain spectral colours can be recreated using only three monochromatic sources of light. But there is also a subset of spectral colours which cannot be replicated using only the three wavelengths of light.&lt;&#x2F;p&gt;
&lt;p&gt;While the experiment had used three spectral colours to replicate most spectral colours, the same three wavelengths can also be used to replicate non-spectral colours. Light with other wavelengths or different spectral power distibutions can be used to reproduce other spectral and non-spectral colours as well. In general, bodies with &lt;a href=&quot;https:&#x2F;&#x2F;ekunazanu.dev&#x2F;lab&#x2F;quantifying-colour&#x2F;switch#below&quot;&gt;different spectral power distributions&lt;&#x2F;a&gt; can be perceived as same colours as long as they generate identical responses in cones. This phenomenon is called &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Metamerism_(colour)&quot;&gt;metamerism&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;

&lt;svg id=&quot;bitarraySVG&quot; viewBox=&quot;0 0 200 75&quot; fill=&quot;none&quot; width=&quot;1200px&quot; height=&quot;450px&quot;&gt;
&lt;desc&gt;Bit array.&lt;&#x2F;desc&gt;
&lt;rect id=&quot;bitarrayBG&quot; fill=&quot;#aaa&quot; x=&quot;0&quot; y=&quot;0&quot; width=&quot;200&quot; height=&quot;150&quot; &#x2F;&gt;
&lt;&#x2F;svg&gt;


&lt;!-- ![spd on left above; spd on right above; identical response curves below on both left and right; separate products at the bottom on left and right; show cone response bars below bottom; make the spd drawable; if drawing is not feasible, make it such that the &quot;different spd&quot; link cycles through various metamer spds — every time it is clicked;](interactive) --&gt;

&lt;h2 id=&quot;Colour_Space&quot;&gt;Colour Space&lt;&#x2F;h2&gt;
&lt;p&gt;Since the responses generated by the L-cones, M-cones, and S-cones correspond to a colour, a set of (L,M,S) values can identify a colour. The set of (L,M,S) values can also be mapped as points in a three dimensional space — a colour can be described as a point on this space. As this space can describe colours, it is aptly called a &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Color_space&quot;&gt;colour space&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;details  &gt;
&lt;summary&gt;Measuring LMS values&lt;&#x2F;summary&gt;
The (L,M,S) values is the total response of their respective cones. The total response of each cone is simply the area under their corresponding response curves, and the response curves of the cones are the pointwise product of their normalized sensitivity curves and the spectral power distribution. So, if &lt;code&gt;J(λ)&lt;&#x2F;code&gt; is the spectral power distrubtion of the light source, and &lt;code&gt;l(λ)&lt;&#x2F;code&gt;, &lt;code&gt;m(λ)&lt;&#x2F;code&gt;, and &lt;code&gt;s(λ)&lt;&#x2F;code&gt; are the sensitivity curves of the L-cones, M-cones, and S-cones — then the L, M, and S values is given by:&lt;br &#x2F;&gt;
&lt;code&gt;L = ∫ J(λ)·l(λ) dλ&lt;&#x2F;code&gt;&lt;br &#x2F;&gt;
&lt;code&gt;M = ∫ J(λ)·m(λ) dλ&lt;&#x2F;code&gt;&lt;br &#x2F;&gt;
&lt;code&gt;S = ∫ J(λ)·s(λ) dλ&lt;&#x2F;code&gt;
&lt;&#x2F;details&gt;
&lt;p&gt;In this case, the colour space is the &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;LMS_color_space&quot;&gt;LMS colur space&lt;&#x2F;a&gt; — where a colour can be described as a set of (L,M,S) values in this space.&lt;&#x2F;p&gt;

&lt;svg id=&quot;bitarraySVG&quot; viewBox=&quot;0 0 200 75&quot; fill=&quot;none&quot; width=&quot;1200px&quot; height=&quot;450px&quot;&gt;
&lt;desc&gt;Bit array.&lt;&#x2F;desc&gt;
&lt;rect id=&quot;bitarrayBG&quot; fill=&quot;#aaa&quot; x=&quot;0&quot; y=&quot;0&quot; width=&quot;200&quot; height=&quot;150&quot; &#x2F;&gt;
&lt;&#x2F;svg&gt;


&lt;!-- ![LMS colour cube on left — isomorphic projection; sliced plane of cube on right for specific value of L — plane has (M, S) as coordinates — show point on place corresponding to M S values; sliders for &#x27;L, M, S response&#x27; below&#x2F;at bottom; colour box on right of sliders; https:&#x2F;&#x2F;www.psy.ritsumei.ac.jp&#x2F;akitaoka&#x2F;LMS_color_space.html; show impossible colours](static&#x2F;interactive-maybe3d) --&gt;

&lt;details  open  &gt;
&lt;summary&gt;Impossible colours&lt;&#x2F;summary&gt;
While all colours can be represented using LMS values, the reverse is not always true. Not all LMS values correspond to perceivable colours. The sensitivity curves of the M-cones overlaps the sensitivity curves of L-cones and S-cones. Any type of light that excites the M-cones, must also excite the L-cones, or S-cones, or both. So ‘colours’ having LMS values such as (0,1,0) are &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Impossible_color#Imaginary_colors&quot;&gt;imaginary&lt;&#x2F;a&gt; and physically impossible.
&lt;&#x2F;details&gt;
&lt;p&gt;The LMS colour space is one way to describe colours. But there are other ways as well. While fundamental, the LMS colour space is not the standard reference for describing colours — it is the &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;CIE_1931_color_space&quot;&gt;CIE 1931 colour spaces&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;CIE_1931&quot;&gt;CIE 1931&lt;&#x2F;h3&gt;
&lt;p&gt;In the Wright-Guild colour matching experiments, three wavelengths of light were used to recreate spectral colours by varying the intensity of the individual constituent lights. The same three wavelengths can also be used to produce non-spectral colours.&lt;&#x2F;p&gt;
&lt;p&gt;All these spectral and non-spectral colours can again be represented as a set of three intensity values — for each of the three wavelengths. The set of intensity values can again be represented as points in some space. Colours can be described as points in this space as well, and this colour space is called the &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;CIE_1931_color_space#CIE_RGB_color_space&quot;&gt;CIE RGB colour space&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;

&lt;svg id=&quot;bitarraySVG&quot; viewBox=&quot;0 0 200 75&quot; fill=&quot;none&quot; width=&quot;1200px&quot; height=&quot;450px&quot;&gt;
&lt;desc&gt;Bit array.&lt;&#x2F;desc&gt;
&lt;rect id=&quot;bitarrayBG&quot; fill=&quot;#aaa&quot; x=&quot;0&quot; y=&quot;0&quot; width=&quot;200&quot; height=&quot;150&quot; &#x2F;&gt;
&lt;&#x2F;svg&gt;


&lt;!-- ![RGB colour space cube on left; slice of plane on right; similar to LMS color space; sliders should explicitly mention &#x27;Xnm intensity&#x27; and not cone response; colour box on right of sliders;](interactive) --&gt;

&lt;details  open  &gt;
&lt;summary&gt;CIE RGB space bases&lt;&#x2F;summary&gt;
The CIE RGB colour space uses as lights of 700nm (R), 546nm (G), and 435nm (B) as its &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Primary_color#Real_primaries&quot;&gt;primaries&lt;&#x2F;a&gt; (colours used to recreate other colours). The LMS colour space, in contrast, used the response of the cones (L,M,S) as its bases.
&lt;&#x2F;details&gt;
&lt;p&gt;Mapping spectral colours in the CIE RGB colour space results in the &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Spectral_color#In_color_spaces&quot;&gt;spectral locus&lt;&#x2F;a&gt;. This curve represents the intensity of RGB primaries required to replicate spectral colours — it is simply the Wright-Guild colour-matching curves mapped in the CIE RGB colour space.&lt;&#x2F;p&gt;

&lt;svg id=&quot;bitarraySVG&quot; viewBox=&quot;0 0 200 75&quot; fill=&quot;none&quot; width=&quot;1200px&quot; height=&quot;450px&quot;&gt;
&lt;desc&gt;Bit array.&lt;&#x2F;desc&gt;
&lt;rect id=&quot;bitarrayBG&quot; fill=&quot;#aaa&quot; x=&quot;0&quot; y=&quot;0&quot; width=&quot;200&quot; height=&quot;150&quot; &#x2F;&gt;
&lt;&#x2F;svg&gt;


&lt;!-- ![spectral locus mapped on CIE RGB color cube; sliced plane on right — like earlier; slider for wavelength;](interactive) --&gt;

&lt;p&gt;Because of the way the colour space is constructed, parts of the spectral locus have negative RGB values. This means that certain spectral (and non-spectral) colours have to be described using negative values in the CIE RGB colour space.&lt;&#x2F;p&gt;
&lt;p&gt;It was decided that a colour space that could map all colours to non-negative values would have been preferable. But instead of conducting more experiments to construct a new colour space, the existing CIE RGB colour space could also be transformed using simple linear transformations. The transformation of the three dimensional colour space can then be defined by a 3x3 matrix:&lt;&#x2F;p&gt;

&lt;svg id=&quot;bitarraySVG&quot; viewBox=&quot;0 0 200 75&quot; fill=&quot;none&quot; width=&quot;1200px&quot; height=&quot;450px&quot;&gt;
&lt;desc&gt;Bit array.&lt;&#x2F;desc&gt;
&lt;rect id=&quot;bitarrayBG&quot; fill=&quot;#aaa&quot; x=&quot;0&quot; y=&quot;0&quot; width=&quot;200&quot; height=&quot;150&quot; &#x2F;&gt;
&lt;&#x2F;svg&gt;


&lt;!-- ![colour space with spectral locus with bouding boxes drawing with dotted lines on left — also has three orthogonal lines to depict primaries; arrow with matrix below the arrow in middle; transformed space on the right — transforming space transforms primaries — use red, green, blue for old primaries that change with space transform — but also include gray orthogonal lines that stay in place regardless of transform; below inputs for matrix on left; on right of matrix inputs include views depicting top, side and front views — option to select which view — include transformed primaries and fixed orthogonal primaries; include transformation from https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;File:CIE1931_RGBCMF.svg to https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;File:CIE_1931_XYZ_Color_Matching_Functions.svg;](interactive) --&gt;

&lt;details  open  &gt;
&lt;summary&gt;Colour space transformations&lt;&#x2F;summary&gt;
Linear transformation of colour spaces is possible since human colour perception is nearly linear. The linearity of colour perception in humans is again inferred from Grassman’s laws.
&lt;&#x2F;details&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;ekunazanu.dev&#x2F;lab&#x2F;quantifying-colour&#x2F;switch#transformToXYZ&quot;&gt;Transforming&lt;&#x2F;a&gt; the space means the new space is now defined by different new bases or new primaries. Earlier, some spectral colours had to be defined by negative values of a primary, but now the same colour is defined by positive values. It suggests that the coordinate system (the primaries) itself has to contain some sort of a negative intensity. But it is impossible for light to have negative intensity, implying that the primaries for the new colour cannot physically exist, and are imaginary.&lt;&#x2F;p&gt;
&lt;p&gt;Since the primaries of the new colour space are imaginary, it is reasonable to define the new primaries to represent more abstract concepts instead of physical quantities. Again, it was decided that one of the primaries would define the &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Luminance&quot;&gt;luminance&lt;&#x2F;a&gt; of the colour, and the other two can be used to derive its &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Chromaticity&quot;&gt;chromaticity&lt;&#x2F;a&gt;. The primaries of this new colours space are named X, Y, and Z — and the resulting colour space is called &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;CIE_1931_color_space#Meaning_of_X,_Y_and_Z&quot;&gt;CIE XYZ colour space&lt;&#x2F;a&gt;. The Y primary represents the luminance of a colour, while the X and Z primaries are used to derive its chromaticity.&lt;&#x2F;p&gt;
&lt;details  &gt;
&lt;summary&gt;Luminance and chromaticity&lt;&#x2F;summary&gt;
Luminance refers to the perceived brightness of a colour, while chromaticity is analogous to hues. According to the &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Opponent_process&quot;&gt;opponent process&lt;&#x2F;a&gt; theory, colours are perceieved as pairs of opposing colours — red vs green, blue vs yellow (chromaticity), and black vs white (luminance). Hence, it is possible to describe a colour by how red it is compared to how green it is, how blue it is compared to how yellow it is, and how bright the overall colour is — ie. defining colours based on luminance and chromaticity values.
&lt;&#x2F;details&gt;
&lt;p&gt;Similar to how the sensitivity of different cones can be measured, the average sensitivity of all the cones can also be measured — resulting in a curve that effectively functions as a &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Luminous_efficiency_function&quot;&gt;luminosity sensitivity curve&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;

&lt;svg id=&quot;bitarraySVG&quot; viewBox=&quot;0 0 200 75&quot; fill=&quot;none&quot; width=&quot;1200px&quot; height=&quot;450px&quot;&gt;
&lt;desc&gt;Bit array.&lt;&#x2F;desc&gt;
&lt;rect id=&quot;bitarrayBG&quot; fill=&quot;#aaa&quot; x=&quot;0&quot; y=&quot;0&quot; width=&quot;200&quot; height=&quot;150&quot; &#x2F;&gt;
&lt;&#x2F;svg&gt;


&lt;!-- ![photopic vision luminosity function](static) --&gt;

&lt;p&gt;This curve can also be approximated as a weighted sum of the individual RGB colour matching function curves:&lt;&#x2F;p&gt;

&lt;svg id=&quot;bitarraySVG&quot; viewBox=&quot;0 0 200 75&quot; fill=&quot;none&quot; width=&quot;1200px&quot; height=&quot;450px&quot;&gt;
&lt;desc&gt;Bit array.&lt;&#x2F;desc&gt;
&lt;rect id=&quot;bitarrayBG&quot; fill=&quot;#aaa&quot; x=&quot;0&quot; y=&quot;0&quot; width=&quot;200&quot; height=&quot;150&quot; &#x2F;&gt;
&lt;&#x2F;svg&gt;


&lt;!-- ![three color matching function curves side-by-side on left — with number values below them denoting weights — add symbol between them; equal symbol between input curves on left and output curve on right; output curve on right; output curve also has fixed luminosity function curve in gray;](interactive) --&gt;

&lt;p&gt;The &lt;a href=&quot;https:&#x2F;&#x2F;ekunazanu.dev&#x2F;lab&#x2F;quantifying-colour&#x2F;switch#above&quot;&gt;factors&lt;&#x2F;a&gt; represent how much the RGB primaries contribute to the overall brightness or luminance of a colour. But the luminance of a colour is the Y primary in the XYZ colour space. So the factors represent how much each of the RGB primaries contribute to the Y primary in the XYZ colour space — and forms one row of the transformation matrix:&lt;&#x2F;p&gt;

&lt;svg id=&quot;bitarraySVG&quot; viewBox=&quot;0 0 200 75&quot; fill=&quot;none&quot; width=&quot;1200px&quot; height=&quot;450px&quot;&gt;
&lt;desc&gt;Bit array.&lt;&#x2F;desc&gt;
&lt;rect id=&quot;bitarrayBG&quot; fill=&quot;#aaa&quot; x=&quot;0&quot; y=&quot;0&quot; width=&quot;200&quot; height=&quot;150&quot; &#x2F;&gt;
&lt;&#x2F;svg&gt;


&lt;!-- ![colour space transform as above; matrix transform but with time with fixed middle rows; include transformation from https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;File:CIE1931_RGBCMF.svg to https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;File:CIE_1931_XYZ_Color_Matching_Functions.svg;](interactive) --&gt;

&lt;p&gt;The X and Z primaries was defined such that the new colour space fulfilled &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;CIE_1931_color_space#Construction_of_the_CIE_XYZ_color_space_from_the_Wright%E2%80%93Guild_data&quot;&gt;other certain properties&lt;&#x2F;a&gt; decided by the CIE — resulting in a transformation matrix with values:&lt;&#x2F;p&gt;

&lt;svg id=&quot;bitarraySVG&quot; viewBox=&quot;0 0 200 75&quot; fill=&quot;none&quot; width=&quot;1200px&quot; height=&quot;450px&quot;&gt;
&lt;desc&gt;Bit array.&lt;&#x2F;desc&gt;
&lt;rect id=&quot;bitarrayBG&quot; fill=&quot;#aaa&quot; x=&quot;0&quot; y=&quot;0&quot; width=&quot;200&quot; height=&quot;150&quot; &#x2F;&gt;
&lt;&#x2F;svg&gt;


&lt;!-- ![matrix transform as above; fixed values for matrix; include transformation from https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;File:CIE1931_RGBCMF.svg to https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;File:CIE_1931_XYZ_Color_Matching_Functions.svg;](interactive&#x2F;static) --&gt;

&lt;p&gt;The X and Z primaries do not directly represent the chromaticity of a colour, but can be used to derive it. To understand how the X and Z primaries can be used to derive the chromaticity in the CIE XYZ colour space, it first helps to understand how the same can be achieved in the CIE RBG colour space.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;Chromaticity&quot;&gt;Chromaticity&lt;&#x2F;h3&gt;
&lt;p&gt;In the CIE RGB colour space, the sum of the intensity of its primaries (R+G+B) can act as a crude approximation for luminance of a colour, while the ratios between the intensities of the RGB primaries can serve as an approximation for a colour’s chromaticity. The ratios r, g, b representing the chromaticity of the R, G, B primaries respectively can then be calculated by normalizing out the total intensity of the primaries:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;r = R&#x2F;(R+G+B)&lt;&#x2F;code&gt;&lt;br &#x2F;&gt;
&lt;code&gt;g = G&#x2F;(R+G+B)&lt;&#x2F;code&gt;&lt;br &#x2F;&gt;
&lt;code&gt;b = B&#x2F;(R+G+B)&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;details  &gt;
&lt;summary&gt;Luminance-chromaticity estimates&lt;&#x2F;summary&gt;
While the luminance and chromaticity are approximations, it does not mean that there is loss of information. The exact RGB values can be recreated using the luminance and chromaticity estimates. The approximation simply refers to the imperfect separation of luminance and chromaticity.
&lt;&#x2F;details&gt;
&lt;p&gt;In the CIE RGB colour space, all the colours with a luminosity value of one will lie on the plane R+G+B = 1. The plane is a triangle bounded by the points (1,0,0), (0,1,0), and (0,0,1).&lt;&#x2F;p&gt;

&lt;svg id=&quot;bitarraySVG&quot; viewBox=&quot;0 0 200 75&quot; fill=&quot;none&quot; width=&quot;1200px&quot; height=&quot;450px&quot;&gt;
&lt;desc&gt;Bit array.&lt;&#x2F;desc&gt;
&lt;rect id=&quot;bitarrayBG&quot; fill=&quot;#aaa&quot; x=&quot;0&quot; y=&quot;0&quot; width=&quot;200&quot; height=&quot;150&quot; &#x2F;&gt;
&lt;&#x2F;svg&gt;


&lt;!-- ![sliced plane RGB space — https:&#x2F;&#x2F;jamie-wong.com&#x2F;images&#x2F;color&#x2F;TriangleSliceRGB.png](static) --&gt;

&lt;p&gt;The chromaticity values (r,g,b) of the colours on this plane are simply the (R,G,B) values, since the luminosity is one — the ratios are already normalized.&lt;&#x2F;p&gt;

&lt;svg id=&quot;bitarraySVG&quot; viewBox=&quot;0 0 200 75&quot; fill=&quot;none&quot; width=&quot;1200px&quot; height=&quot;450px&quot;&gt;
&lt;desc&gt;Bit array.&lt;&#x2F;desc&gt;
&lt;rect id=&quot;bitarrayBG&quot; fill=&quot;#aaa&quot; x=&quot;0&quot; y=&quot;0&quot; width=&quot;200&quot; height=&quot;150&quot; &#x2F;&gt;
&lt;&#x2F;svg&gt;


&lt;!-- ![sliced plane RGB space on top on left; 2d plane for R+G+B=1 as another figure on right of cube; sliders for (R,G,B) below on left; L as a progress bar (non-adjustable; fixed to 1); stacked horizontal bar chart bars for (r,g,b) on right of RGB slider — but maybe include numerial values below too; increasing any one of the RGB values decreases the remaing two primaries (proportionally, such that the ratio bewteen the other primaries is maintained; maybe or maybe not emphasize that r=R, g=G, b=B); see below visualisation for more info — make both of them look similar — exceptions being the fixed luminance to one — and no chromaticity line projection thingy — and only one sliced plane; plot (R,G,B) and (r,g,b) as points on both the sliced plane in the cube figure and the 2d plane figure](interactive) --&gt;

&lt;p&gt;A colour having some other luminance k would lie on the plane R+G+B = k — the plane in the CIE RGB colour space bounded by (k,0,0), (0,k,0,), and (0,0,k). The chromaticity values (r,g,b) are derived by normalizing the (R,G,B) values. Geometrically, it is the same as scaling the plane, or projecting the point on the R+G+B = 1 plane.&lt;&#x2F;p&gt;

&lt;svg id=&quot;bitarraySVG&quot; viewBox=&quot;0 0 200 75&quot; fill=&quot;none&quot; width=&quot;1200px&quot; height=&quot;450px&quot;&gt;
&lt;desc&gt;Bit array.&lt;&#x2F;desc&gt;
&lt;rect id=&quot;bitarrayBG&quot; fill=&quot;#aaa&quot; x=&quot;0&quot; y=&quot;0&quot; width=&quot;200&quot; height=&quot;150&quot; &#x2F;&gt;
&lt;&#x2F;svg&gt;


&lt;!-- ![greyed out sliced plane R+G+B=1 space on top; another greyed out plane for R+G+B=k; 2d sliced plane for R+G+B=1 (NOT R+G+B=k) as another figure on right of cube; sliders for RBG below; k values as a progress bar (non adjustable — determined by RGB values — max value 3 I guess) on right of sliders; rgb values (non-adjustable, determined by RGB values) as a stacked proportional horizontal bar chart type bar — https:&#x2F;&#x2F;media.geeksforgeeks.org&#x2F;wp-content&#x2F;uploads&#x2F;20200923090400&#x2F;1.PNG — but numerical values below; plot (R,G,B) on the R+G+B=k plane on the cube figure; plot (r,g,b) as points on the plane R+G+B=1 in the sliced plane cube figure, as well as the separate plane figure on the right; in the cube figure include a faint line joining (0,0,0) to (R,G,B) passing through (r,g,b) to signify projection;](interactive) --&gt;

&lt;details  &gt;
&lt;summary&gt;Dimensionality reduction&lt;&#x2F;summary&gt;
The line connecting a point (R,G,B) to the origin (0,0,0) can be thought of as lines of chromaticity. Points on the same line but at different distances represent colours with the same chromaticity but different luminance values. The (r,g,b) values are the projection of the points on the R+G+B =1 plane — so colours having the same chromaticity but different luminance values get projected on the same point, leading to &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Dimensionality_reduction&quot;&gt;loss of information&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;The chromaticity plane contains information about chromaticity, and generally does not contain any information about luminance. So unless luminance is explicitly specified, it is impossible to recreate the corresponding RGB values using just the (r,g,b) values.
&lt;&#x2F;details&gt;
&lt;p&gt;Since (r,g,b) values denote ratios, r+g+b is always equal to one. It makes one of the three values redundant. Knowing two, the third can be deduced by subtracting the other two values from one. The values for r and g are kept, and b is discarded. Geometrically, it can be represented by projecting points on the R+G+B = 1 plane to the RG plane.&lt;&#x2F;p&gt;

&lt;svg id=&quot;bitarraySVG&quot; viewBox=&quot;0 0 200 75&quot; fill=&quot;none&quot; width=&quot;1200px&quot; height=&quot;450px&quot;&gt;
&lt;desc&gt;Bit array.&lt;&#x2F;desc&gt;
&lt;rect id=&quot;bitarrayBG&quot; fill=&quot;#aaa&quot; x=&quot;0&quot; y=&quot;0&quot; width=&quot;200&quot; height=&quot;150&quot; &#x2F;&gt;
&lt;&#x2F;svg&gt;


&lt;!--![greyed out sliced plane R+G+B=1 space on top; another greyed out plane for R+G+B=k; 2d sliced plane for R+G+B=1 (NOT R+G+B=k) as another figure on right of cube — in the middle; rg plane on the right — right of separate sliced 2d plane figure — maybe make it selectable to choose rg-plane, gb-plane or rb-plane OR make a smooth transition between rg-plane and R+G+B=1 plane; sliders for RBG below; k values as a progress bar (non adjustable — determined by RGB values — max value 3 I guess) on right of sliders; rgb values (non-adjustable, determined by RGB values) as a stacked proportional horizontal bar chart type bar — https:&#x2F;&#x2F;media.geeksforgeeks.org&#x2F;wp-content&#x2F;uploads&#x2F;20200923090400&#x2F;1.PNG — but numerical values below; plot (R,G,B) on the R+G+B=k plane on the cube figure; plot (r,g,b) as points on the plane R+G+B=1 in the sliced plane cube figure, as well as the separate plane figure on the right — as well as the rg-plane diagram; in the cube figure include a faint line joining (0,0,0) to (R,G,B) passing through (r,g,b) to signify projection;](interactive) --&gt;

&lt;details  open  &gt;
&lt;summary&gt;The rg plane&lt;&#x2F;summary&gt;
While the points are projected on the RG plane, it is represented as the rg plane because RG and rg represent different quantities. The values (r,g) represent the chromaticity of a colour, while (R,G) values represent the intensity of R and G primaries.
&lt;&#x2F;details&gt;
&lt;p&gt;These projections result in a chromaticity plane that describes the chromaticity of a colour using (r,g) values. However, the &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Rg_chromaticity&quot;&gt;rg chromaticity space&lt;&#x2F;a&gt; cannot describe all possible chromaticity of colours with positive values since the CIE RGB colour space itself cannot. But the same idea can be translated for the CIE XYZ colour space.&lt;&#x2F;p&gt;
&lt;p&gt;Similar to how colours were projected on the rg plane in the CIE RGB colour space, the same can be projected on the xy plane in the CIE XYZ colour space. However in this colour space, the bases are imaginary and the only colours that have been mapped so far are the spectral colours. So the chromaticity of spectral colours are first mapped on the xy plane.&lt;&#x2F;p&gt;

&lt;svg id=&quot;bitarraySVG&quot; viewBox=&quot;0 0 200 75&quot; fill=&quot;none&quot; width=&quot;1200px&quot; height=&quot;450px&quot;&gt;
&lt;desc&gt;Bit array.&lt;&#x2F;desc&gt;
&lt;rect id=&quot;bitarrayBG&quot; fill=&quot;#aaa&quot; x=&quot;0&quot; y=&quot;0&quot; width=&quot;200&quot; height=&quot;150&quot; &#x2F;&gt;
&lt;&#x2F;svg&gt;


&lt;!-- ![greyed out sliced plane X+Y+Z=1 space on top; another greyed out plane for X+Y+Z=k — k determined by wavelength parameter; 2d sliced plane for X+Y+Z=1 (NOT X+Y+Z=k) as another figure on right of cube — in the middle; rg plane on the right — right of separate sliced 2d plane figure — maybe make a smooth transition between xy-plane and X+Y+Z=1 plane; slider for wavelength of specteal colour; xyz values (non-adjustable, determined by wavalength parameter) as a stacked proportional horizontal bar chart type bar — https:&#x2F;&#x2F;media.geeksforgeeks.org&#x2F;wp-content&#x2F;uploads&#x2F;20200923090400&#x2F;1.PNG — but numerical values below; plot (X,Y,Z) on the X+Y+Z=k plane on the cube figure; plot (x,y,z) as points on the plane X+Y+Z=1 in the sliced plane cube figure, as well as the separate plane figure on the right — as well as the xy-plane diagram; in the cube figure include a faint line joining (0,0,0) to (X,Y,Z) passing through (x,y,z) to signify projection;](interactive) --&gt;

&lt;details  open  &gt;
&lt;summary&gt;Meaning of xy&lt;&#x2F;summary&gt;
The nomenclature used in the CIE XYZ colour space to describe the chromaticity of colours is analagous to the naming convention used in the CIE RGB colour space. So &lt;code&gt;x = X&#x2F;(X+Y+Z)&lt;&#x2F;code&gt; and &lt;code&gt;y = Y&#x2F;(X+Y+Z)&lt;&#x2F;code&gt;.
&lt;&#x2F;details&gt;
&lt;p&gt;If two points can define a line in the xy plane, a point on that line can be represented as the ratio of these two points:&lt;&#x2F;p&gt;

&lt;svg id=&quot;bitarraySVG&quot; viewBox=&quot;0 0 200 75&quot; fill=&quot;none&quot; width=&quot;1200px&quot; height=&quot;450px&quot;&gt;
&lt;desc&gt;Bit array.&lt;&#x2F;desc&gt;
&lt;rect id=&quot;bitarrayBG&quot; fill=&quot;#aaa&quot; x=&quot;0&quot; y=&quot;0&quot; width=&quot;200&quot; height=&quot;150&quot; &#x2F;&gt;
&lt;&#x2F;svg&gt;


&lt;!-- ![horseshoe curve on xy plane; line crossing through x,y axes; two points for selecting line — draggable on the xy plane — maybe make it so the line always lies inside positive (triangle quadrant?); point on line — determined by the ratio slider; two sliders for ratio of two primaries — sum is one — increasing one decreases the other; stacked horizontal bar chart type bars on right of sliders showing ratio of two primaries — on left of bar char bar the (x,y,z) coordinates of one draggable point — on right of bar the (x,y,z) coordinates of the other draggable point;](interactive) --&gt;

&lt;p&gt;But the line can also &lt;a href=&quot;https:&#x2F;&#x2F;ekunazanu.dev&#x2F;lab&#x2F;quantifying-colour&#x2F;switch#below&quot;&gt;intersect the spectral locus&lt;&#x2F;a&gt;. Then, the point can also be represented as the ratio of the points on the spectral locus:&lt;&#x2F;p&gt;

&lt;svg id=&quot;bitarraySVG&quot; viewBox=&quot;0 0 200 75&quot; fill=&quot;none&quot; width=&quot;1200px&quot; height=&quot;450px&quot;&gt;
&lt;desc&gt;Bit array.&lt;&#x2F;desc&gt;
&lt;rect id=&quot;bitarrayBG&quot; fill=&quot;#aaa&quot; x=&quot;0&quot; y=&quot;0&quot; width=&quot;200&quot; height=&quot;150&quot; &#x2F;&gt;
&lt;&#x2F;svg&gt;


&lt;!-- ![same as above; but include new (keep the original bar) and separate stacked horizontal bar chart for ratio of showing spectral colour intensities — emphasize ratio of spectral intensities;](interactive) --&gt;

&lt;p&gt;But the points on spectral locus represent the chromaticity of spectral colours — colours which can be physically perceived. A point in the xy plane can be defined as (x,y) values or as the ratio between the intensity of two (or more) spectral colours.&lt;&#x2F;p&gt;
&lt;details  &gt;
&lt;summary&gt;Colour perception linearity&lt;&#x2F;summary&gt;
The ratio between the intensity of the primaries, ie. (x,y) values, is equal to the ratio between the intensity of the spectal colours because colour perception is linear. The near linearity of human colour perception is again inferred from Grassman’s laws.
&lt;&#x2F;details&gt;
&lt;p&gt;All the points inside the spectral locus are all non-spectral colours and their chromaticity can be represented as the ratio between the intensity of other spectral colours. If all these colours, along with all the spectral colours are mapped in the xy plane, it results in the &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;CIE_1931_color_space#&#x2F;media&#x2F;File:CIE1931xy_blank.svg&quot;&gt;CIE xy chromaticity diagram&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;

&lt;svg id=&quot;bitarraySVG&quot; viewBox=&quot;0 0 200 75&quot; fill=&quot;none&quot; width=&quot;1200px&quot; height=&quot;450px&quot;&gt;
&lt;desc&gt;Bit array.&lt;&#x2F;desc&gt;
&lt;rect id=&quot;bitarrayBG&quot; fill=&quot;#aaa&quot; x=&quot;0&quot; y=&quot;0&quot; width=&quot;200&quot; height=&quot;150&quot; &#x2F;&gt;
&lt;&#x2F;svg&gt;


&lt;!-- ![cie xy diagram without planckian locus and white points — just outline (with spectral locus wavelegnth labels — huge maybe) and chromaticity](static) --&gt;

&lt;p&gt;The chromaticity (and colours) outside the spectral locus are imaginary, but all the points inside contain the chromaticity of all colours perceviable by an average human. As the CIE xy chromaticity diagram can represent all perceivable chromaticities, it is often used for comparing other colour spaces.&lt;&#x2F;p&gt;
&lt;details  &gt;
&lt;summary&gt;The xy plane to compare colour spaces&lt;&#x2F;summary&gt;
The xy chromaticity diagram represents a &lt;em&gt;chromaticity&lt;&#x2F;em&gt; space, not a &lt;em&gt;colour&lt;&#x2F;em&gt; space. Using a chromaticity space to compare colour spaces is not perfectly accurate, since luminance information cannot be compared. However comparing chromaticity information is simpler, and sufficient in certain cases. For a more complete comparison of colour spaces, the CIE XYZ colour space is generally used as the standard reference instead.
&lt;&#x2F;details&gt;
&lt;details  &gt;
&lt;summary&gt;CIE xyY colour space&lt;&#x2F;summary&gt;
The CIE xy chromaticity diagram represents chromaticity, but not colours since there is no information about luminance. Adding a luminance component allows it to represent colours, forming a colours space. In the RGB colour space the luminance of a colour was approximated as the sum of the primaries, but in CIE XYZ space the luminance is already somewhat accurately described by the Y primary — which means it can be represented using the Y primary. The chromaticity (x,y) along with luminance Y forms the CIE xyY colour space.
&lt;&#x2F;details&gt;
&lt;h2 id=&quot;Gamut&quot;&gt;Gamut&lt;&#x2F;h2&gt;
&lt;p&gt;As mentioned, the chromaticity of a colour can be described by the ratio of the intensity of two monochromatic colours. Conversely, two monochromatic light sources can produce colours having a chromaticity that lies on the line joining the corresponding two points in the CIE xy plane:&lt;&#x2F;p&gt;

&lt;svg id=&quot;bitarraySVG&quot; viewBox=&quot;0 0 200 75&quot; fill=&quot;none&quot; width=&quot;1200px&quot; height=&quot;450px&quot;&gt;
&lt;desc&gt;Bit array.&lt;&#x2F;desc&gt;
&lt;rect id=&quot;bitarrayBG&quot; fill=&quot;#aaa&quot; x=&quot;0&quot; y=&quot;0&quot; width=&quot;200&quot; height=&quot;150&quot; &#x2F;&gt;
&lt;&#x2F;svg&gt;


&lt;!-- ![similar diagram as the line joining xy plane with a point — line and point determined by sliders; make line endpoints un-draggable — instead determined by two sliders for wavelengths — endpoints would lie on spetral locus; two more sliders determines relative intensity of both primaries — increasing intensity of one decreases the other; stacked horizontal bar chart bar to show ratios of primaries;](interactive) --&gt;

&lt;p&gt;Adding a third monochromatic light allows for more combinations of ratios of among the primaries — greatly expanding the chromaticty of colours that can be recreated:&lt;&#x2F;p&gt;

&lt;svg id=&quot;bitarraySVG&quot; viewBox=&quot;0 0 200 75&quot; fill=&quot;none&quot; width=&quot;1200px&quot; height=&quot;450px&quot;&gt;
&lt;desc&gt;Bit array.&lt;&#x2F;desc&gt;
&lt;rect id=&quot;bitarrayBG&quot; fill=&quot;#aaa&quot; x=&quot;0&quot; y=&quot;0&quot; width=&quot;200&quot; height=&quot;150&quot; &#x2F;&gt;
&lt;&#x2F;svg&gt;


&lt;!-- ![xy plane with faint dotted triangle outline — vertices determined by sliders; make line endpoints un-draggable — instead determined by three sliders for wavelengths — vertices would lie on spetral locus; three more sliders determines relative intensity of primaries — increasing intensity of one decreases the other two — such that the ratio between the other two is preserved; stacked horizontal bar chart bar to show ratios of primaries; two solid distinct lines on xy plane and show final point as point on a line — and the line is determined by a point on another line — similar to https:&#x2F;&#x2F;graphics.stanford.edu&#x2F;courses&#x2F;cs148-10-summer&#x2F;docs&#x2F;2010--kerr--cie_xyz.pdf PAGE 13 — but make the point and lines adjustable using sliders;](interactive) --&gt;

&lt;p&gt;Using more sources of monochromatic light generally results in a bigger chromaticity space that can be physically recreated by the light sources:&lt;&#x2F;p&gt;

&lt;svg id=&quot;bitarraySVG&quot; viewBox=&quot;0 0 200 75&quot; fill=&quot;none&quot; width=&quot;1200px&quot; height=&quot;450px&quot;&gt;
&lt;desc&gt;Bit array.&lt;&#x2F;desc&gt;
&lt;rect id=&quot;bitarrayBG&quot; fill=&quot;#aaa&quot; x=&quot;0&quot; y=&quot;0&quot; width=&quot;200&quot; height=&quot;150&quot; &#x2F;&gt;
&lt;&#x2F;svg&gt;


&lt;!-- ![mostly same as above; but instead of triangle, a convex polygon — number of vertices (max 5, min 2) determined by checkboxes; same sliders as above, but five this time — unselecting the primary disables the slider and ratio bar (and sliders) gets accordingly reset;](interactive) --&gt;

&lt;p&gt;The primaries define a &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Convex_polygon&quot;&gt;convex polygon&lt;&#x2F;a&gt;, which represents the chromaticity of colours that can be physically recreated by the primaries. This range of colours (chromaticities) that the primaries can produce is called its &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Gamut&quot;&gt;gamut&lt;&#x2F;a&gt;. Points lying outside the polygon cannot be physically created, since it would require creating light with negative intensity.&lt;&#x2F;p&gt;
&lt;p&gt;The gamut of the original CIE RGB primaries on the CIE xy chromaticity diagram would then look like this:&lt;&#x2F;p&gt;

&lt;svg id=&quot;bitarraySVG&quot; viewBox=&quot;0 0 200 75&quot; fill=&quot;none&quot; width=&quot;1200px&quot; height=&quot;450px&quot;&gt;
&lt;desc&gt;Bit array.&lt;&#x2F;desc&gt;
&lt;rect id=&quot;bitarrayBG&quot; fill=&quot;#aaa&quot; x=&quot;0&quot; y=&quot;0&quot; width=&quot;200&quot; height=&quot;150&quot; &#x2F;&gt;
&lt;&#x2F;svg&gt;


&lt;!-- ![xy plane with solid triangle outline — vertices fixed at CIE RGB primaries; three more sliders determines relative intensity of primaries — increasing intensity of one decreases the other two — such that the ratio between the other two is preserved; stacked horizontal bar chart bar to show ratios of primaries; two faint lines on xy plane and show point as point on a line — and the line is determined by a point on another line — similar to https:&#x2F;&#x2F;graphics.stanford.edu&#x2F;courses&#x2F;cs148-10-summer&#x2F;docs&#x2F;2010--kerr--cie_xyz.pdf PAGE 13 — but make the point and lines adjustable using sliders;](interactive) --&gt;

&lt;details  open  &gt;
&lt;summary&gt;CIE RGB chromaticity gamut&lt;&#x2F;summary&gt;
It has been stated that the CIE RGB cannot physically reproduce certain colours and this is yet another representation of the same idea. Although in this case, the diagram represents the &lt;em&gt;chromaticities&lt;&#x2F;em&gt; that cannot be reproduced, instead of the exact colours.
&lt;&#x2F;details&gt;
&lt;p&gt;The gamut of the display devices depends on its primaries. It is economically efficient to use just three primaries — which are not purely monochromatic. Certain colour spaces are designed keeping such gamut constraints in mind, such as the &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;SRGB&quot;&gt;sRGB&lt;&#x2F;a&gt; colour space or the &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;DCI-P3&quot;&gt;DCI-P3&lt;&#x2F;a&gt; colour space.&lt;&#x2F;p&gt;

&lt;svg id=&quot;bitarraySVG&quot; viewBox=&quot;0 0 200 75&quot; fill=&quot;none&quot; width=&quot;1200px&quot; height=&quot;450px&quot;&gt;
&lt;desc&gt;Bit array.&lt;&#x2F;desc&gt;
&lt;rect id=&quot;bitarrayBG&quot; fill=&quot;#aaa&quot; x=&quot;0&quot; y=&quot;0&quot; width=&quot;200&quot; height=&quot;150&quot; &#x2F;&gt;
&lt;&#x2F;svg&gt;


&lt;!-- ![cie xy chromaticity diagram; triangles&#x2F;convex polygons overlaid on top depending on colour space chosen; menu select for colour space;](interactive) --&gt;

&lt;details  open  &gt;
&lt;summary&gt;Gamut &amp; Colour space&lt;&#x2F;summary&gt;
Gamut refers to the set of colours that can be physically recreated by an output device, while a colour space is simply a mathematical model used to describe colours. Colour spaces may arbitrarily restrict itself to certain values to more accurately represent physical and economic constraints.
&lt;&#x2F;details&gt;
&lt;h2 id=&quot;White_Point&quot;&gt;White Point&lt;&#x2F;h2&gt;
&lt;p&gt;Back to some physical science — all bodies radiate photons, due to &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Black-body_radiation&quot;&gt;blackbody radiation&lt;&#x2F;a&gt;. The spectral power distribution of the radiation is a &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Planck%27s_law#The_law&quot;&gt;function of temperature&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;

&lt;svg id=&quot;bitarraySVG&quot; viewBox=&quot;0 0 200 75&quot; fill=&quot;none&quot; width=&quot;1200px&quot; height=&quot;450px&quot;&gt;
&lt;desc&gt;Bit array.&lt;&#x2F;desc&gt;
&lt;rect id=&quot;bitarrayBG&quot; fill=&quot;#aaa&quot; x=&quot;0&quot; y=&quot;0&quot; width=&quot;200&quot; height=&quot;150&quot; &#x2F;&gt;
&lt;&#x2F;svg&gt;


&lt;!-- ![black coloured spherical body radiating photons; spd below; slider for temperature bottom;](interactive) --&gt;

&lt;details  open  &gt;
&lt;summary&gt;Blackbody&lt;&#x2F;summary&gt;
A blackbody is an idealized body that does not reflect any light and only emits blackbody radiation. Most bodies in the universe are not technically not (perfect) blackbodies, but approximating it as such is still useful nonetheless.
&lt;&#x2F;details&gt;
&lt;p&gt;The spectral power distribution of the radiation will have a colour associated with it:&lt;&#x2F;p&gt;

&lt;svg id=&quot;bitarraySVG&quot; viewBox=&quot;0 0 200 75&quot; fill=&quot;none&quot; width=&quot;1200px&quot; height=&quot;450px&quot;&gt;
&lt;desc&gt;Bit array.&lt;&#x2F;desc&gt;
&lt;rect id=&quot;bitarrayBG&quot; fill=&quot;#aaa&quot; x=&quot;0&quot; y=&quot;0&quot; width=&quot;200&quot; height=&quot;150&quot; &#x2F;&gt;
&lt;&#x2F;svg&gt;


&lt;!-- ![spd on top — dependent on slider for temperature; another spd below — zoomed in on range 400nm-700nm — maybe show lines on above spd to indicate it is zoomed in view of the above spd; sensitivity curve graph of photoreceptor cells below; response curve of above two graphs below — shade the areas below with colour of photoreceptor type (rod=black,s=blue,m=greenish,l=yellowish-to-red); slider for temperature at bottom below all graphs; show amount of response of each type of receptors (rods and cones) as a sort of (progress&#x2F;without sliding knob) bars on the right of the sliders for wavelength and intensity of photons; eg: https:&#x2F;&#x2F;jamie-wong.com&#x2F;images&#x2F;color&#x2F;ConeExcitation1.png — combine all the three coloumns to one graph; keep rows separate; small colour box below or next to right to response (progress-like) bar, showing colors BUT NO colour names below the box; highlight response of cones progress bars and cones curves — by greying&#x2F;reducing contrast of rods response progress bars, rods sensitivity curves, and rods response curves;](interactive) --&gt;

&lt;p&gt;The colours above have a corresponding chromaticity — and when mapped on the CIE xy chromaticity diagram, form the &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Planckian_locus&quot;&gt;planckian locus&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;

&lt;svg id=&quot;bitarraySVG&quot; viewBox=&quot;0 0 200 75&quot; fill=&quot;none&quot; width=&quot;1200px&quot; height=&quot;450px&quot;&gt;
&lt;desc&gt;Bit array.&lt;&#x2F;desc&gt;
&lt;rect id=&quot;bitarrayBG&quot; fill=&quot;#aaa&quot; x=&quot;0&quot; y=&quot;0&quot; width=&quot;200&quot; height=&quot;150&quot; &#x2F;&gt;
&lt;&#x2F;svg&gt;


&lt;!-- ![cie xy chromaticity diagram with faint planckian locus (NO correlated colour temp lines) with correlated colour temperature lines; point on the locus — determined by temperature; reuse slider for temperature above;](interactive) --&gt;

&lt;p&gt;The &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Color_temperature&quot;&gt;colour temperature&lt;&#x2F;a&gt; is another way to describe certain colours and chromaticities — mostly different types of white. It is a common way to do it, as most physical sources of illumination have a chromaticity close to these values. Daylight, for example, has a chromaticity similar to a blackbody at temperatures ranging from 5000K to 6500K, and incandescent bulbs emit light having a colour temperature close to 2700K.&lt;&#x2F;p&gt;
&lt;details  &gt;
&lt;summary&gt;Daylight colour temperature&lt;&#x2F;summary&gt;
Incandescent bulbs have filaments heated to about 2000K to 2700K and thus have colour temperature close to that temperature. But the same is not true for sunlight as its colour temperature depends on the time of day. Due to &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Rayleigh_scattering&quot;&gt;rayleigh scattering&lt;&#x2F;a&gt;, shorter wavelengths of sunlight get scattered making it appear redder, while making skies and overcast light appear bluer. During mornings and evenings when the sun is lower in the sky, more light gets scattered causing sunlight to appear even redder (have a lower colour temperature). Daylight is the combination of all direct and indirect sunlight, and thus also depends on the time of day.
&lt;&#x2F;details&gt;
&lt;p&gt;Most illuminants have chromaticty values that lie close to the planckian locus, but do not lie exactly on it — as most bodies are not perfect blackbodies. Also, incadescent lights have been phased out by &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Fluorescent_lamp#Color_temperature&quot;&gt;flourescent lights&lt;&#x2F;a&gt; and &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Light-emitting_diode#White_LEDs&quot;&gt;LEDs&lt;&#x2F;a&gt;, which do not use thermal radiation to emit light, and also do not lie on the planckian locus:&lt;&#x2F;p&gt;

&lt;svg id=&quot;bitarraySVG&quot; viewBox=&quot;0 0 200 75&quot; fill=&quot;none&quot; width=&quot;1200px&quot; height=&quot;450px&quot;&gt;
&lt;desc&gt;Bit array.&lt;&#x2F;desc&gt;
&lt;rect id=&quot;bitarrayBG&quot; fill=&quot;#aaa&quot; x=&quot;0&quot; y=&quot;0&quot; width=&quot;200&quot; height=&quot;150&quot; &#x2F;&gt;
&lt;&#x2F;svg&gt;


&lt;!-- ![cie xy chromaticity diagram with faint planckian locus; chromacity points of (non-standard) illuminants mapped on the plane;](static) --&gt;

&lt;p&gt;While the chromaticity values of these illuminants do not lie on the planckian locus, they are still close enough to be perceptually similar to be meaningfully attributed to a colour temperature. These can be assigned a &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Correlated_color_temperature&quot;&gt;correlated colour temperature&lt;&#x2F;a&gt; based on the colour temperature it most closely resembles.&lt;&#x2F;p&gt;
&lt;p&gt;Correlated colour temperatures can also be mapped alongside the planckian locus:&lt;&#x2F;p&gt;

&lt;svg id=&quot;bitarraySVG&quot; viewBox=&quot;0 0 200 75&quot; fill=&quot;none&quot; width=&quot;1200px&quot; height=&quot;450px&quot;&gt;
&lt;desc&gt;Bit array.&lt;&#x2F;desc&gt;
&lt;rect id=&quot;bitarrayBG&quot; fill=&quot;#aaa&quot; x=&quot;0&quot; y=&quot;0&quot; width=&quot;200&quot; height=&quot;150&quot; &#x2F;&gt;
&lt;&#x2F;svg&gt;


&lt;!-- ![cie xy chromaticity diagram with planckian locus with correlated colour temperature lines](static) --&gt;

&lt;details  open  &gt;
&lt;summary&gt;Correlated colour temperature lines&lt;&#x2F;summary&gt;
The lines intersecting the planckian locus represent correlated colour temperatures. Two points on a correlated colour temperture line have the same correlated correlated colour temperature.
&lt;&#x2F;details&gt;
&lt;p&gt;Correlated colour temperature can describe non-ideal blackbodies and other sources of white light. But since a single correlated colour temperature can correspond to multiple chromaticity values, it is not a precise way to describe white light.&lt;&#x2F;p&gt;
&lt;p&gt;To represent different types of white light in an umabiguous way, &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Standard_illuminant&quot;&gt;standard illuminants&lt;&#x2F;a&gt; have been defined — theoretical souces of light having a definitive spectral power distribution, and therefore an exact chromaticity value.&lt;&#x2F;p&gt;

&lt;svg id=&quot;bitarraySVG&quot; viewBox=&quot;0 0 200 75&quot; fill=&quot;none&quot; width=&quot;1200px&quot; height=&quot;450px&quot;&gt;
&lt;desc&gt;Bit array.&lt;&#x2F;desc&gt;
&lt;rect id=&quot;bitarrayBG&quot; fill=&quot;#aaa&quot; x=&quot;0&quot; y=&quot;0&quot; width=&quot;200&quot; height=&quot;150&quot; &#x2F;&gt;
&lt;&#x2F;svg&gt;


&lt;!-- ![spd for illuminants above; cie xy diagram with faint planckian locus and correlated colour temperature below; points showing chromaticity standard illuminant; more info about selected standard illuminant — eg. D65: Represents average daylight, etc;](static) --&gt;

&lt;p&gt;Having a standard and precise way to define illumination sources is necessary because of &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Chromatic_adaptation&quot;&gt;chromatic adaptation&lt;&#x2F;a&gt;. Human colour perception adjusts for variations in illumination to preserve colours of objects. Two colours might appear white despite having different ‘true’ colours because of varying lighting conditions.&lt;&#x2F;p&gt;

&lt;svg id=&quot;bitarraySVG&quot; viewBox=&quot;0 0 200 75&quot; fill=&quot;none&quot; width=&quot;1200px&quot; height=&quot;450px&quot;&gt;
&lt;desc&gt;Bit array.&lt;&#x2F;desc&gt;
&lt;rect id=&quot;bitarrayBG&quot; fill=&quot;#aaa&quot; x=&quot;0&quot; y=&quot;0&quot; width=&quot;200&quot; height=&quot;150&quot; &#x2F;&gt;
&lt;&#x2F;svg&gt;


&lt;!-- ![comparison reddish white vs bluish white — http:&#x2F;&#x2F;brainden.com&#x2F;images&#x2F;color-cube-big.jpg, or image similar to white-golden or blue-black dress image; https:&#x2F;&#x2F;upload.wikimedia.org&#x2F;wikipedia&#x2F;commons&#x2F;a&#x2F;a3&#x2F;Wikipe-tan_wearing_The_Dress_reduced.svg](static) --&gt;

&lt;details  open  &gt;
&lt;summary&gt;Same colours under different lighting&lt;&#x2F;summary&gt;
Same colours might look different under different lighting conditions and vice versa. &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;The_dress&quot;&gt;The dress&lt;&#x2F;a&gt; is a popular example. The same colours can be perceived as either blue and black, or white and golden — depending on the perceived lighting.
&lt;&#x2F;details&gt;
&lt;p&gt;Specifying a &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;White_point&quot;&gt;white point&lt;&#x2F;a&gt; acts as a reference point for a colour space — to adjust for different viewing mediums and environments. Most colour spaces use the chromaticity of standard illuminants to define their white point.&lt;&#x2F;p&gt;

&lt;svg id=&quot;bitarraySVG&quot; viewBox=&quot;0 0 200 75&quot; fill=&quot;none&quot; width=&quot;1200px&quot; height=&quot;450px&quot;&gt;
&lt;desc&gt;Bit array.&lt;&#x2F;desc&gt;
&lt;rect id=&quot;bitarrayBG&quot; fill=&quot;#aaa&quot; x=&quot;0&quot; y=&quot;0&quot; width=&quot;200&quot; height=&quot;150&quot; &#x2F;&gt;
&lt;&#x2F;svg&gt;


&lt;!-- ![cie xy chromaticity diagram; make it similar to gamut selection with RGB primaries; but with faint white point; draggable white point; similar sliders as before;](interactive) --&gt;

&lt;details  open  &gt;
&lt;summary&gt;White as reference point&lt;&#x2F;summary&gt;
Dragging the white point to &lt;a href=&quot;switch#&quot;&gt;D65&lt;&#x2F;a&gt; or &lt;a href=&quot;switch#&quot;&gt;4500K&lt;&#x2F;a&gt; shows how the chromaticity gets transformed to take into account the effects of &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Chromatic_adaptation&quot;&gt;chromatic adaptation&lt;&#x2F;a&gt;.
&lt;&#x2F;details&gt;
&lt;h2 id=&quot;Colour_Science&quot;&gt;Colour Science&lt;&#x2F;h2&gt;
&lt;p&gt;Colours are a very interesting topic, because it involves quantifying something that feels innately qualitative. So far, only certain &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Additive_color&quot;&gt;additive colour models&lt;&#x2F;a&gt; have been discussed. But there are also &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Color_mixing&quot;&gt;other colour models&lt;&#x2F;a&gt;, such as the popular &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;CMYK_color_model&quot;&gt;CMYK model&lt;&#x2F;a&gt;, which is a type of &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Subtractive_color&quot;&gt;subtractive colour model&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Most of these topics involve ways to &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Colorimetry&quot;&gt;describe and recreate colours&lt;&#x2F;a&gt;. But there is also an entirely different branch of science that deals with the &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Color_psychology&quot;&gt;psychology of colours&lt;&#x2F;a&gt; — why and how certain &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Color_scheme&quot;&gt;colour combinations&lt;&#x2F;a&gt; appear pleasing, or how the &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Color_symbolism&quot;&gt;meaning of colours&lt;&#x2F;a&gt; vary across cultures. Or how colours can &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Color_psychology#Influence_of_color_on_perception&quot;&gt;affect other senses&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;The subject of colours is vast — spanning scientific domains from quantum physics and electromagnetism to physiology and psychology. This post is a very tiny fraction of what constitutes &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Color_science&quot;&gt;colour science&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;References&quot;&gt;References&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;Jamie Wong: &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;jamie-wong.com&#x2F;post&#x2F;color&#x2F;&quot;&gt;Color: From Hexcodes to Eyeballs&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Bartosz Ciechanowski: &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;ciechanow.ski&#x2F;color-spaces&#x2F;&quot;&gt;Color Spaces&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Douglas A. Kerr: &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;graphics.stanford.edu&#x2F;courses&#x2F;cs148-10-summer&#x2F;docs&#x2F;2010--kerr--cie_xyz.pdf&quot;&gt;The CIE XYZ and xyY Color Spaces&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;!--
Assign (switch#) links a class and make them distinct from other links.
maybe show values next to all sliders
--&gt;
</content>
    </entry>
</feed>
